<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JBoss Tools Aggregated Feed</title>
  <id>https://tools.jboss.org</id>
  <updated>2023-10-13T09:42:56Z</updated>
  <link href="https://tools.jboss.org"></link>
  <entry>
    <title>JBoss Blogs: How to solve CVE-2023-44487</title>
    <updated>2023-10-12T16:29:29Z</updated>
    <id>https://www.mastertheboss.com/various-stuff/how-to-solve-cve-2023-44487/</id>
    <link href="https://www.mastertheboss.com/various-stuff/how-to-solve-cve-2023-44487/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Eclipse Vert.x 4.4.6 released!</title>
    <updated>2023-10-11T00:00:00Z</updated>
    <id>https://vertx.io/blog/eclipse-vert-x-4-4-6</id>
    <link href="https://vertx.io/blog/eclipse-vert-x-4-4-6" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Getting started with API Management</title>
    <updated>2023-10-10T11:02:56Z</updated>
    <id>https://www.mastertheboss.com/jboss-frameworks/apigateway/getting-started-with-api-management/</id>
    <link href="https://www.mastertheboss.com/jboss-frameworks/apigateway/getting-started-with-api-management/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Red Hat Developer: How to validate GitOps manifests</title>
    <updated>2023-10-10T07:00:00Z</updated>
    <id>95d3a2f7-477c-4c56-8894-124fa034c2c2</id>
    <link href="https://developers.redhat.com/articles/2023/10/10/how-validate-gitops-manifests" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One of the major challenges of managing a cluster and application resources with GitOps is validating that changes to the GitOps manifests are correct. When making changes to objects directly on the cluster, the user is immediately presented with feedback when issues exist. The user is able to troubleshoot and resolve those issues with the knowledge of the context of the changes they just made. When working with GitOps, that feedback cycle is often delayed and users don&#39;t receive feedback on changes until they are applied to the cluster, which could be hours or even weeks depending on the approval lifecycle of a change.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To reduce the number of errors in changes to a GitOps manifest and eliminate the dreaded &lt;code&gt;Unknown&lt;/code&gt; state in an ArgoCD application, this article will discuss tools and best practices. We will discuss automating these validations with GitHub actions, but all of these validations can be configured with another CI tool of your choice.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;yaml-linting&#34;&gt;Using YAML linters&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;YAML is the basis of nearly all GitOps repos. As you would expect, YAML has specific syntax standards for validity. Additionally, there are many recommended best practices that may not be required but can help improve the consistency and readability of the YAML.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;YAML linters are a great tool to help validate requirements on a repo and enforce consistent style for some of the optional configurations. Many different YAML linter tools exists, but one that I recommend is &lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;yamllint&lt;/a&gt;. TheÂ &lt;code&gt;yamllint&lt;/code&gt; is built with Python, making it easy to set up on most Linux and MacOS environments since Python is installed by default and easily installed on any Windows environment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To install &lt;code&gt;yamllint&lt;/code&gt; you can run the following command with &lt;code&gt;pip&lt;/code&gt;, the Python package management tool:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-sh&#34;&gt;pip install --&lt;span class=&#34;hljs-keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;yamllint&lt;/span&gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Once installed, users can use the &lt;code&gt;yamllint&lt;/code&gt; cli tool to manually validate individual files:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-sh&#34;&gt;yamllint &lt;span class=&#34;hljs-keyword&#34;&gt;my&lt;/span&gt;-&lt;span class=&#34;hljs-built_in&#34;&gt;file&lt;/span&gt;.yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or an entire directory structure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-sh&#34;&gt;yamllint .&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;yamllint&lt;/code&gt; provides a default configuration that may provide warnings for some style standards that you many not wish to enforce. The default options can easily be configured by creating a file called &lt;code&gt;.yamllint&lt;/code&gt; in the root of the project. The following is a common configuration used in many GitOps repos:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-yaml&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;extends&lt;/span&gt;: default&#xA;&#xA;&lt;span class=&#34;less&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;rules&lt;/span&gt;:&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;document-start&lt;/span&gt;: disable&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;indentation&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;indent-sequences&lt;/span&gt;: whatever&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;line-length&lt;/span&gt;: disable&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;truthy&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;ignore&lt;/span&gt;: .github/workflows/&lt;/span&gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;automating-with-github-actions&#34;&gt;Automating with GitHub actions&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Running &lt;code&gt;yamllint&lt;/code&gt; locally is a great option for developers to get feedback while making changes to a repo, however running &lt;code&gt;yamllint&lt;/code&gt; directly in a CI tool such as GitHub actions can help enforce standards and prevent improperly formatted YAML from ever making it into the main branch.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To add a yamllint GitHub action, we can utilize a pre-built GitHub action and create a file called &lt;code&gt;.github/workflows/validate-manifests.yaml&lt;/code&gt; in your project containing the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-yaml&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Validate Manifests&#xA;&lt;span class=&#34;hljs-attribute&#34;&gt;on&lt;/span&gt;:&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;push&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;branches&lt;/span&gt;:&#xA;      - &lt;span class=&#34;hljs-string&#34;&gt;&#34;*&#34;&lt;/span&gt;&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;pull_request&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;branches&lt;/span&gt;:&#xA;      - &lt;span class=&#34;hljs-string&#34;&gt;&#34;*&#34;&lt;/span&gt;&#xA;&#xA;&lt;span class=&#34;hljs-attribute&#34;&gt;jobs&lt;/span&gt;:&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;lint-yaml&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;runs-on&lt;/span&gt;: ubuntu-latest&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;steps&lt;/span&gt;:&#xA;      - &lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Code Checkout&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;uses&lt;/span&gt;: actions/checkout&lt;span class=&#34;hljs-variable&#34;&gt;@v3&lt;/span&gt;&#xA;      - &lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Validate YAML&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;uses&lt;/span&gt;: ibiqlik/action-yamllint&lt;span class=&#34;hljs-variable&#34;&gt;@v3&lt;/span&gt;&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;with&lt;/span&gt;:&#xA;          &lt;span class=&#34;hljs-attribute&#34;&gt;format&lt;/span&gt;: github&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;One great feature of &lt;code&gt;yamllint&lt;/code&gt; is that it has native integration with GitHub and can do annotations directly on the lines of code with issues, making it easier for developers to identify problems and resolve them (Figure 1).&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/yamllint-annotation-error.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/yamllint-annotation-error.png?itok=_OHjlhTz&#34; width=&#34;600&#34; height=&#34;227&#34; alt=&#34;A screenshot of a yamllint error Github annotation.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;field field--name-field-caption field--type-string field--label-hidden field__items&#34;&gt;&#xA;      &lt;div class=&#34;rhd-c-caption field__item&#34;&gt;Figure 1: This illustrates a yamllint error GitHub annotation.&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 id=&#34;what-this-is-good-for&#34;&gt;The benefits of YAML linters&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;YAML linters are designed to enforce generic YAML standards and make sure that objects are properly structured based on those generic standards. YAML linters are great for identifying issues with misconfigurations in YAML, such as extra lines in files or incorrect tabbing in objects. YAML linters can be great for catching problems such as objects incorrectly copied and pasted into a repo or a field accidentally duplicated in the same object.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;YAML linters can also keep GitOps repos more consistent and enforce some chosen standards for all contributors to the repo, making the repo more readable and maintainable. However, YAML linters are generally not able to do any sort of deeper inspection of the objects, and they do not validate the object against the expected schema for that object type.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;kustomize-validation&#34;&gt;Kustomize validation&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Kustomize is one of the most common tools found in a GitOps repo for helping to organize and deploy YAML objects. Repos can commonly contain dozen, if not hundreds of &lt;code&gt;kustomization.yaml&lt;/code&gt; files that can be incorrectly configured and cause errors when you reach the deployment step if not validated beforehand.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A simple validation can be performed using the &lt;code&gt;kustomize&lt;/code&gt; CLI tool:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-sh&#34;&gt;kustomize build path/&lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt;/&lt;span class=&#34;hljs-keyword&#34;&gt;my&lt;/span&gt;/folder&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This command will attempt to render the folder using kustomize and display the final YAML objects. If it successfully renders, the &lt;code&gt;kustomization.yaml&lt;/code&gt; file is valid. If it does not, kustomize will display an error to troubleshoot the issue.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When making changes in kustomize, it can be easy to cause unforeseen problems. Therefore, it is always recommended to validate all kustomize resources in a repo, even those that you have not directly changed. A script that looks for all &lt;code&gt;kustomization.yaml&lt;/code&gt; files in the repo, and attempts to run &lt;code&gt;kustomize build&lt;/code&gt; for each folder can help to validate that no unintentional errors have been created. Fortunately, the Red Hat CoP has already created a &lt;a href=&#34;https://github.com/redhat-cop/gitops-catalog/blob/main/scripts/validate_manifests.sh&#34;&gt;script&lt;/a&gt; to do exactly that. Copy the &lt;code&gt;validate_manifests.sh&lt;/code&gt; directly into a GitOps repo. Generally, I store it in a scripts folder, but you can run the script with the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-sh&#34;&gt;.&lt;span class=&#34;hljs-regexp&#34;&gt;/scripts/&lt;/span&gt;validate_manifests.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;automating-with-github-actions&#34;&gt;Automating with GitHub Actions&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Just like the YAML lint, validating the kustomize in a CI tool is an important step to adding confidence to changes to a repo and ensuring that no errors are introduced into the main branch.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Conveniently, GitHub Actions already has the kustomize tool built in so we can create a simple action to run the previously mentioned script by adding a new job to the same validation action we created before:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-yaml&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;jobs&lt;/span&gt;:&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;lint-kustomize&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;runs-on&lt;/span&gt;: ubuntu-latest&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;steps&lt;/span&gt;:&#xA;      - &lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Code Checkout&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;uses&lt;/span&gt;: actions/checkout&lt;span class=&#34;hljs-variable&#34;&gt;@v3&lt;/span&gt;&#xA;      - &lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Verify Kustomize CLI Installation&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;run&lt;/span&gt;: |&#xA;          which kustomize&#xA;          kustomize version&#xA;      - &lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Validate Manifests&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;run&lt;/span&gt;: |&#xA;          ./scripts/validate_manifests.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;what-this-is-good-for&#34;&gt;The benefits of Kustomize validation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Kustomize is a powerful tool, but one that is easy for human error to cause problems. This simple practice of validating every &lt;code&gt;kustomization.yaml&lt;/code&gt; file in a repo can reduce the number of errors created by accidentally misspelling a filename or forgetting to update a filename in the &lt;code&gt;kustomization.yaml&lt;/code&gt; file after renaming it. This kustomize check can also identify problems where objects are updated and any patches that impact those objects are no longer valid.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additional, this validation can help to ensure that you don&#39;t accidentally break dependencies where another &lt;code&gt;kustomization.yaml&lt;/code&gt; file inherits from a folder you did change. You can quickly catch problems before changes are merged into the main branch, such as when an object is removed from a base folder and that same object is being referenced in the overlay.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;validating-helm&#34;&gt;Using the Helm tool&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Helm is another popular tool that is utilized in GitOps repos for organizing complex applications. Helm is an extremely powerful tool but one that can be prone to errors due to its complex syntax and structure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Fortunately, Helm provides a built in tool to help validate charts within the CLI:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-sh&#34;&gt;helm lint path/&lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt;/&lt;span class=&#34;hljs-keyword&#34;&gt;my&lt;/span&gt;/chart&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Helm&#39;s linting capabilities will help to validate the template code to ensure that it is valid, verify all of the necessary values are present, and emit warnings for other recommendations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As with the kustomize script, we can automate validating all of the charts in the repo by searching for any &lt;code&gt;Chart.yaml&lt;/code&gt; files. The following script can be created in a file called &lt;code&gt;validate_charts.sh&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-sh&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#!/bin/sh&#xA;&lt;/span&gt;&#xA;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; `find &lt;span class=&#34;hljs-string&#34;&gt;&#34;&lt;span class=&#34;hljs-variable&#34;&gt;${HELM_DIRS}&lt;/span&gt;&#34;&lt;/span&gt; -name &lt;span class=&#34;hljs-string&#34;&gt;&#34;Chart.yaml&#34;&lt;/span&gt; -exec dirname {} \;`;&#xA;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;&#xA;&#xA;    &lt;span class=&#34;hljs-built_in&#34;&gt;echo&lt;/span&gt;&#xA;    &lt;span class=&#34;hljs-built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;Validating &lt;span class=&#34;hljs-variable&#34;&gt;$i&lt;/span&gt;&#34;&lt;/span&gt;&#xA;    &lt;span class=&#34;hljs-built_in&#34;&gt;echo&lt;/span&gt;&#xA;&#xA;    helm lint &lt;span class=&#34;hljs-variable&#34;&gt;$i&lt;/span&gt;&#xA;&#xA;    build_response=$?&#xA;&#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; [ &lt;span class=&#34;hljs-variable&#34;&gt;$build_response&lt;/span&gt; &lt;span class=&#34;hljs-_&#34;&gt;-ne&lt;/span&gt; 0 ]; &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt;&#xA;        &lt;span class=&#34;hljs-built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;Error linting &lt;span class=&#34;hljs-variable&#34;&gt;$i&lt;/span&gt;&#34;&lt;/span&gt;&#xA;        &lt;span class=&#34;hljs-built_in&#34;&gt;exit&lt;/span&gt; 1&#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;fi&lt;/span&gt;&#xA;&#xA;&lt;span class=&#34;hljs-keyword&#34;&gt;done&lt;/span&gt;&#xA;&#xA;&lt;span class=&#34;hljs-built_in&#34;&gt;echo&lt;/span&gt;&#xA;&lt;span class=&#34;hljs-built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&#34;Charts successfully validated!&#34;&lt;/span&gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can easily validate all of the charts in a repository at once by running the following command:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-sh&#34;&gt;.&lt;span class=&#34;hljs-regexp&#34;&gt;/scripts/&lt;/span&gt;validate_charts.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This new script can be triggered from a GitHub Action just like the previous kustomize check. However in this case, helm is not built into the base action, so it must be installed as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;lang-yaml&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;jobs&lt;/span&gt;:&#xA;  &lt;span class=&#34;hljs-attribute&#34;&gt;helm-lint&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;runs-on&lt;/span&gt;: ubuntu-latest&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;env&lt;/span&gt;:&#xA;      &lt;span class=&#34;hljs-attribute&#34;&gt;HELM_VERSION&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;3.12&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&#xA;      &lt;span class=&#34;hljs-attribute&#34;&gt;HELM_DIRS&lt;/span&gt;: .&#xA;    &lt;span class=&#34;hljs-attribute&#34;&gt;steps&lt;/span&gt;:&#xA;      - &lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Install Helm&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;run&lt;/span&gt;: |&#xA;          sudo curl -L -o /usr/bin/helm &lt;span class=&#34;hljs-attribute&#34;&gt;https&lt;/span&gt;:&lt;span class=&#34;hljs-comment&#34;&gt;//get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz&lt;/span&gt;&#xA;          sudo chmod +x /usr/bin/helm&#xA;      - &lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Code Checkout&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;uses&lt;/span&gt;: actions/checkout&lt;span class=&#34;hljs-variable&#34;&gt;@v3&lt;/span&gt;&#xA;      - &lt;span class=&#34;hljs-attribute&#34;&gt;name&lt;/span&gt;: Validate Charts&#xA;        &lt;span class=&#34;hljs-attribute&#34;&gt;run&lt;/span&gt;: |&#xA;            ./scripts/validate_charts.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;what-this-is-good-for&#34;&gt;The benefits of Helm lint&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Helm linting can help to catch many issues. Helm is notorious for its complexity and the challenges that the templating language can introduce. You can catch common issues, such as misspelling a value name or incorrectly scoping a variable, with the Helm linting tool. Additionally, a Helm lint can catch other configuration issues in a chart such as an invalid reference in the &lt;code&gt;Chart.yaml&lt;/code&gt; file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Helm linting does not do any validation on the YAML from the rendered charts. It only validates that the chart can be rendered. In some cases, it may be beneficial to apply additional validations on the rendered charts themselves.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;next-steps-and-limitations&#34;&gt;Next steps and limitations&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The validations discussed are a great first step for improving the confidence of changes in a GitOps repo before deployment. Running these validations can help you avoid common mistakes in GitOps and allow you to catch and resolve problems before they are ever attempted to be validated against the cluster.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One major limitation of these checks is the lack of validation of the objects being applied to a cluster. If a field only accepts a value of &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; the validations discussed today will not be able to identify an invalid configuration such as this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;More specialized tools such as &lt;code&gt;kubeval&lt;/code&gt; and &lt;code&gt;kubeconform&lt;/code&gt; can help to validate standard Kubernetes objects, but they lack support for Red Hat OpenShift specific objects or CustomResources from Operators out of the box. &lt;a href=&#34;https://cloud.redhat.com/blog/validating-openshift-manifests-in-a-gitops-world&#34;&gt;Extracting schemas&lt;/a&gt; for those objects is possible, which can help to extend validation of objects even beyond standard k8s objects.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, you can perform validations directly against a target cluster itself using the &lt;code&gt;--dry-run=server&lt;/code&gt; flag with &lt;code&gt;oc apply&lt;/code&gt;. Using the dry-run flag allows the objects to be validated against the cluster itself and provides an even greater degree of confidence that objects applied to the cluster will be successful.&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/10/how-validate-gitops-manifests&#34; title=&#34;How to validate GitOps manifests&#34;&gt;How to validate GitOps manifests&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>Red Hat Developer: How custom SELinux policies secure servers and containers</title>
    <updated>2023-10-10T07:00:00Z</updated>
    <id>d6e91ea0-1d78-423b-a69e-d1fcca624933</id>
    <link href="https://developers.redhat.com/articles/2023/10/10/how-custom-selinux-policies-secure-servers-and-containers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Security-Enhanced Linux (SELinux) is a robust security framework that enforces mandatory fine-grained access controls on &lt;a href=&#34;https://developers.redhat.com/products/rhel/download#assembly-field-downloads-page-content-61451&#34;&gt;Red Hat Enterprise Linux&lt;/a&gt; systems. When managing server fleets and running containers, the deployment of customized SELinux policies becomes essential for maintaining a strong security posture.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Custom SELinux policies empower organizations to customize access controls according to their unique requirements. Although Linux distributions come with default SELinux policies, they may not address all the use cases or applications within an organization&#39;s environment. Deploying custom policies allows you to establish precise rules that align with your infrastructure and applications.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is the second article in our SELinux series. The &lt;a href=&#34;https://developers.redhat.com/articles/2023/09/21/how-selinux-improves-red-hat-enterprise-linux-security&#34;&gt;first article&lt;/a&gt; described SELinux basics. This article demonstrates the creation and deployment of custom SELinux policies across server fleets and containerized environments, emphasizing the associated benefits and best practices.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;/ul&gt;&lt;h2&gt;How to implement a custom policy&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li aria-level=&#34;1&#34;&gt;&lt;a href=&#34;https://developers.redhat.com/content-gateway/file/rhel/9.2/rhel-9.2-x86_64-dvd.iso&#34;&gt;RHEL server or workstation&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Installed &lt;a href=&#34;https://developers.redhat.com/topics/containers&#34;&gt;Podman&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;The following example describes the steps to create custom policies for granting dedicated directory and file access to users and how to modify a policy file in the file&#39;s permissions and labels or context.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Install the necessary dependency packages: policycoreutils, policycoreutils-devel, setools-console, setroubleshoot. Additionally, create a private_files directory to consolidate all content in one location.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;$mkdir private_files &amp;amp;&amp;amp; cd private_files&#xA;&#xA;$sudo yum install policycoreutils policycoreutils-devel setools-console setroubleshoot -y&#xA;Package policycoreutils-2.9-24.el8.x86_64 is already installed.&#xA;Package policycoreutils-devel-2.9-24.el8.x86_64 is already installed.&#xA;Package setools-console-4.3.0-3.el8.x86_64 is already installed.&#xA;Package setroubleshoot-3.3.26-5.el8.x86_64 is already installed.&#xA;Dependencies resolved.&#xA;Nothing to do.&#xA;Complete!&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;. Create a policy module file called private_files.te, where .te signifies type enforcement. Copy and paste the following content into the terminal to create the private_files.te file.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;lt;&amp;lt;&#39;EOF&#39; &gt;&gt; private_files.te&#xA;policy_module(private_files, 1.0)&#xA;require {&#xA;type unconfined_t;&#xA;type setroubleshootd_t;&#xA;}&#xA;type private_files_t;&#xA;fs_associate(private_files_t);&#xA;allow unconfined_t private_files_t:{dir file} relabelto;&#xA;allow setroubleshootd_t private_files_t:{ dir file } getattr;&#xA;EOF&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;ul&gt;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;policy_module&lt;/strong&gt;: Module name.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;require&lt;/strong&gt;: Specify the domains that must be defined within the policy.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;type&lt;/strong&gt;: Declares new type.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;fs_associate&lt;/strong&gt;: Associate type with filesystem.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;allow&lt;/strong&gt;: Define specific allowÂ rules for permitted actions while blocking all other actions.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;Establish a symbolic link to the makefile using these commands. This will ensure that the &lt;code&gt;make&lt;/code&gt; command references the correct file.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;# ln -s /usr/share/selinux/devel/Makefile.&#xA;# ls -l&#xA;total 4&#xA;lrwxrwxrwx. 1 root rootÂ  33 Aug 30 11:04 Makefile -&gt; /usr/share/selinux/devel/Makefile&#xA;-rwxrwxrwx. 1 root root 283 Aug 30 10:59 private_files.te&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;. Compile the policy files using the &lt;code&gt;make&lt;/code&gt; command. This will produce a private_files.pp output file, which reads private_files.te and generates all required dependency files.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;# make private_files.pp&#xA;Compiling targeted private_files module&#xA;Creating targeted private_files.pp policy package&#xA;rm tmp/private_files.mod tmp/private_files.mod.fc&#xA;&#xA;# ls&#xA;MakefileÂ  private_files.fcÂ  private_files.ifÂ  private_files.ppÂ  private_files.teÂ  tmp&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;. Install the compiled file using the &lt;code&gt;semodule -i&lt;/code&gt; command:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;# semodule -i private_files.pp&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;. Create a file to test the policies and assign full read and write permissions to it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;# mkdir -m 777 /private&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt;. Impose the label to a private directory using the &lt;code&gt;chcon&lt;/code&gt; command:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# chcon -t private_files_t /private&#xA;&#xA;[root@SElinux private_files]# ls -Z /private&#xA;ls: cannot access &#39;/private&#39;: Permission denied&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your statement is clear and effectively conveys the expected behavior of the custom policy.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Fix the permissions&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt;. Make changes in the policy file to grant access to the file and directory using the &lt;code&gt;getattr&lt;/code&gt; (get attribute) syntax.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;policy_module(private_files, 1.0)&#xA;require {&#xA;type unconfined_t;&#xA;type setroubleshootd_t;&#xA;}&#xA;&#xA;type private_files_t;&#xA;fs_associate(private_files_t);&#xA;allow unconfined_t private_files_t:{dir file} { relabelto getattr };&#xA;allow setroubleshootd_t private_files_t:{ dir file } getattr;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;8&lt;/strong&gt;. As shown below, compile a new policy file with the &lt;code&gt;make&lt;/code&gt; command.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# make private_files.pp&#xA;Compiling targeted private_files module&#xA;Creating targeted private_files.pp policy package&#xA;rm tmp/private_files.mod tmp/private_files.mod.fc&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;9&lt;/strong&gt;. Uninstall the previous modules using the following command:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# semodule -r private_files&#xA;libsemanage.semanage_direct_remove_key: Removing last private_files module (no other private_files module exists at another priority).&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;10&lt;/strong&gt;. Deploy the recently compiled.pp file by utilizing the &lt;code&gt;-i&lt;/code&gt; flag.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# semodule -i private_files.pp&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;11&lt;/strong&gt;. To modify the label or context of a private folder, employ the &lt;code&gt;chcon&lt;/code&gt; command.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# chcon -t private_files_t /private&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Inspect the labels of the following directory by employing the &lt;code&gt;-Z&lt;/code&gt; flag.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# ls -Z /private&#xA;ls: cannot open directory &#39;/private&#39;: Permission denied&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;12&lt;/strong&gt;. Determine the root cause of the issue using the &lt;code&gt;ausearch&lt;/code&gt; command, which conducts audits to identify problems and provide resolutions.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# ausearch -m avc -ts recent | audit2allow&#xA;#============= setroubleshootd_t ==============&#xA;#!!!! This avc is allowed in the current policy&#xA;allow setroubleshootd_t private_files_t:dir getattr;&#xA;&#xA;#============= unconfined_t ==============&#xA;&#xA;#!!!! This avc is allowed in the current policy&#xA;allow unconfined_t private_files_t:dir getattr;&#xA;allow unconfined_t private_files_t:dir read;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;13&lt;/strong&gt;. Transition SELinux to the permissive mode by executing the following command:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# setenforce 0&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;14&lt;/strong&gt;. Develop a bash script to facilitate all filesystem-related tasks seamlessly.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;lt;&amp;lt; EOF &gt;&gt; test_script.sh&#xA;ls -lZ /private&#xA;chmod 1777 /private&#xA;touch /private/file1&#xA;echo hello &gt; /private/file1&#xA;echo hello &gt;&gt; /private/file1&#xA;chmod o= /private/file1&#xA;mkdir /private/dir1&#xA;rmdir /private/dir1&#xA;rm -f /private/file1&#xA;chcon -t unconfined_t /private&#xA;EOF&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;15&lt;/strong&gt;. Set permissions of the bash script to execute it using the &lt;code&gt;bash&lt;/code&gt; command.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# chmod 777 test_script.sh&#xA;[root@SElinux private_files]# bash test_script.sh&#xA;total 0&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;16&lt;/strong&gt;. Conduct another audit of the activity within the private directory and determine the resolution.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# ausearch -m avc -ts recent | audit2allow&#xA;#============= unconfined_t ==============&#xA;allow unconfined_t private_files_t:dir { add_name create open read relabelfrom remove_name rmdir search setattr write };&#xA;allow unconfined_t private_files_t:file { append create open setattr unlink write };&#xA;allow unconfined_t self:dir relabelto;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;17&lt;/strong&gt;. Apply the policy resolutions to the private_files.te file by executing the following command:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# ausearch -m avc -ts recent | audit2allow &gt;&gt; private_files.te&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;18&lt;/strong&gt;. After updating private_files.te, it will appear as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# cat private_files.te&#xA;policy_module(private_files, 1.0)&#xA;require {&#xA;type unconfined_t;&#xA;type setroubleshootd_t;&#xA;}&#xA;&#xA;type private_files_t;&#xA;fs_associate(private_files_t);&#xA;allow unconfined_t private_files_t:{dir file} { relabelto getattr };&#xA;allow setroubleshootd_t private_files_t:{ dir file } getattr;&#xA;allow unconfined_t private_files_t:dir { add_name create open read relabelfrom remove_name rmdir search setattr write };&#xA;allow unconfined_t private_files_t:file { append create open setattr unlink write };&#xA;allow unconfined_t self:dir relabelto;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;[Note: Remove the&lt;strong&gt; #== unconfined_t == line&lt;/strong&gt; from the private_files.te file. ]&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;19&lt;/strong&gt;. Recompile the updated private_file.pp file once more to pull the newly made changes in the system.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# make private_files.pp&#xA;Compiling targeted private_files module&#xA;Creating targeted private_files.pp policy package&#xA;rm tmp/private_files.mod tmp/private_files.mod.fc&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;20&lt;/strong&gt;. Uninstall the previous modules using the &lt;code&gt;semodule -r&lt;/code&gt; command.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# semodule -rÂ  private_files&#xA;libsemanage.semanage_direct_remove_key: Removing last private_files module (no other private_files module exists at another priority).&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;21. &lt;/strong&gt;Apply the latest updates from private_file.pp.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# semodule -i private_files.pp&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;22&lt;/strong&gt;. Attempt to relabel it once more for a private directory.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# chcon -t private_files_t /private&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;23.&lt;/strong&gt; Re-enable the enforcing mode and assess the accessibility of directories and files.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# setenforce 1&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;24&lt;/strong&gt;. Check the file permissions using the following command:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# ls -lZd /private&#xA;drwxrwxrwt. 2 root root unconfined_u:object_r:private_files_t:s0 6 Aug 30 11:44 /private&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;25.&lt;/strong&gt; As anticipated, we can now access the files and directories and make changes as needed. After manipulating the SELinux policies.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@SElinux private_files]# touch /private/file1&#xA;[root@SElinux private_files]# echo hello &gt; /private/file1&#xA;[root@SElinux private_files]# cat /private/file1&#xA;hello&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Deploy SELinux configurations to multiple systems&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;To uphold the highest level of security practices, it is essential to keep the server updated and maintain consistent security configurations. However, manually performing this process can be time-consuming and labor-intensive. To address the challenges associated with such scenarios, the &lt;code&gt;semanage&lt;/code&gt; utility proves invaluable. This utility enables the effortless import and export of configuration files (.mode), simplifying the management of security configurations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;. Before proceeding, please install the following dependency packages.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#yum install policycoreutils-python-utils&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;. Use &lt;code&gt;semanage&lt;/code&gt; to generate the configuration file with a.mod extension.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#semanage export -f./my-selinux-settings.mod&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Use &lt;code&gt;semanage&lt;/code&gt; to generate the configuration file with a.mod extension. To transfer.mod files across fleets of servers, various methods such as FTP, SFTP, SCP, and others can be employed. In this instance, we will utilize the &lt;code&gt;scp&lt;/code&gt; command.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#scp./my-selinux-settings.mod new-system-hostname:&#xA;Or&#xA;#scp -t server_a.pem my-selinux-settings.mod user@servera:/home/user/&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; After transferring the files, access the new server using the SSH command.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#ssh root@server_a&#xA;Or&#xA;#ssh -i server.pem user@server_a&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Use the &lt;code&gt;semanage&lt;/code&gt; command to import the configuration file onto the new system.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#semanage import -f./my-selinux-settings.mod&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;[Note: This shared configuration file is compatible only with specific OS versions, such as RHEL 9 to RHEL 9 and RHEL 8 to RHEL 8.]&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Apply SELinux to the containers&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;SELinux policies can be generated for &lt;a href=&#34;https://developers.redhat.com/download-manager/file/podman_basics.pdf?&#34;&gt;containers&lt;/a&gt; using the &lt;code&gt;udica&lt;/code&gt; package in the &lt;a href=&#34;https://developers.redhat.com/content-gateway/file/red-hat-developer-ubi_ebook.pdf&#34;&gt;UBI8 image&lt;/a&gt;. The &lt;code&gt;udica&lt;/code&gt; package enables you to create a customized security policy for precise control over a container&#39;s access to host system resources, including storage, devices, and the network. This capability helps prevent security violations and simplifies regulatory compliance when deploying containers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Before proceeding, please install the necessary dependency packages.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#yum install -y udica&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Install a containerization tool such as Podman or Docker. We will be using &lt;a href=&#34;https://developers.redhat.com/topics/containers&#34;&gt;Podman&lt;/a&gt; as the container tool.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;# yum install podman -y&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Launch the container using a &lt;a href=&#34;https://developers.redhat.com/content-gateway/file/red-hat-developer-ubi_ebook.pdf&#34;&gt;UBI8 image&lt;/a&gt; with volume mounts for the /home directory (read-only permissions) and the /var/spool directory (read and write permissions). Additionally, expose port 80.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#podman run --env container=podman -v /home:/home:ro -v /var/spool:/var/spool:rw -p 80:80 -dit ubi8 bash&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Inspect the running container using the provided Podman command and collect the CONTAINER ID.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#podman ps&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Gather all running container policies into a .json file.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;# podman inspect 567a363etfle &gt; container.json&#xA;&#xA;# udica -j container.json my_container&#xA;Policy my_container with container id 567a363etfle created!&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Load the policy module from theÂ &lt;code&gt;udica&lt;/code&gt; output in the previous step.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#semodule -i my_container.cil /usr/share/udica/templates/{base_container.cil,net_container.cil,home_container.cil}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt;. Stop the container using the &lt;code&gt;podman stop&lt;/code&gt; command, and then start it again with the &lt;code&gt;--security-opt label=type:my_container.process&lt;/code&gt; option.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;#podman stop 567a363etfle&#xA;&#xA;#podman run --security-opt label=type:my_container.process -v /home:/home:ro -v /var/spool:/var/spool:rw -p 80:80 -dit ubi8 bash&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Validating SELinux in containers&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; Verify that the container is running with the my_container.process type, and access the running container using &lt;code&gt;exec&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;# ps -efZ | grep my_container.process&#xA;&#xA;# podman exec -it 567a363etfle bash&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt; Verify that SELinux is functioning properly. Proceed to perform vulnerability testing activities within the running container.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Install the &lt;code&gt;nmap-ncat&lt;/code&gt; package in the container and attempt to redirect port 80 to port 2567.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[root@567a363etfle]# cd /var/spool&#xA;[root@567a363etfle]# yum install nmap-ncat&#xA;[root@567a363etfle]# nc -lvp 80&#xA;...&#xA;Ncat: Listening on :::80&#xA;Ncat: Listening on 0.0.0.0:80&#xA;[root@567a363etfle]# nc -lv- 2567&#xA;...&#xA;Ncat: bind to :::2567: Permission denied. QUITTING.&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As expected, SELinux is successfully preventing security risk activities within the containers as well.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Find more resources&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;For a deeper and practical understanding of &lt;a href=&#34;https://developers.redhat.com/content-gateway/file/rhel/9.2/rhel-9.2-x86_64-boot.iso&#34;&gt;Red Hat Enterprise Linux&lt;/a&gt;, you can engage in thoughtfully curated hands-on labs by Red Hat. Red Hat Universal Base Images (UBI) are container-based and operating system images with complementary runtime languages and packages. Try Red Hat UBI on curated &lt;a href=&#34;https://developers.redhat.com/courses/working-rhel-universal-base-images%3Fsc_cid%3D7013a0000034ZDUAA2&#34;&gt;Red Hat UBI hands-on lab&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this article, we have meticulously crafted bespoke SELinux policies and seamlessly deployed them across an extensive fleet of servers. Additionally, we have seamlessly integrated these policies into containers leveraging the &lt;a href=&#34;https://developers.redhat.com/content-gateway/file/red-hat-developer-ubi_ebook.pdf&#34;&gt;UBI8 container image&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Furthermore, you have the option to obtain tailored &lt;a href=&#34;https://developers.redhat.com/content-gateway/link/3874150&#34;&gt;Red Hat Enterprise Linux images&lt;/a&gt; designed for AWS, Google Cloud Platform, Microsoft Azure, and VMware, facilitating their seamless deployment on your chosen platform.&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/10/how-custom-selinux-policies-secure-servers-and-containers&#34; title=&#34;How custom SELinux policies secure servers and containers&#34;&gt;How custom SELinux policies secure servers and containers&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: A recap of Quarkus Tools for IntelliJ&#39;s latest improvements</title>
    <updated>2023-10-10T00:00:00Z</updated>
    <id>https://quarkus.io/blog/intellij-quarkus-recap/</id>
    <link href="https://quarkus.io/blog/intellij-quarkus-recap/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Quarkus Newsletter #37 - October</title>
    <updated>2023-10-10T00:00:00Z</updated>
    <id>https://quarkus.io/blog/quarkus-newsletter-37/</id>
    <link href="https://quarkus.io/blog/quarkus-newsletter-37/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Quarkus: Quarkus Newsletter #37 - October</title>
    <updated>2023-10-10T00:00:00Z</updated>
    <id>https://quarkus.io/blog/quarkus-newsletter-37/</id>
    <link href="https://quarkus.io/blog/quarkus-newsletter-37/" rel="alternate"></link>
    <summary type="html">Read &#34;Integrate your Quarkus application with GPT4All&#34; by Alex Soto Bueno to explore how to integrate GPT4All into a Quarkus application so that you can query this service and return a response without any external resources. Go behind the scenes to learn how to create a CRUD application using virtual...</summary>
  </entry>
  <entry>
    <title>Quarkus: A recap of Quarkus Tools for IntelliJ&#39;s latest improvements</title>
    <updated>2023-10-10T00:00:00Z</updated>
    <id>https://quarkus.io/blog/intellij-quarkus-recap/</id>
    <link href="https://quarkus.io/blog/intellij-quarkus-recap/" rel="alternate"></link>
    <summary type="html">Quarkus Tools for IntelliJ is a free and open source extension, helping users develop Quarkus applications by providing content-assist, validation, run configurations and many other features right from their favourite IDE. This extension is based on the LSP4MP (i.e. MicroProfile) and its Quarkus add-on, and the Qute language server. These...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Meet Keycloak at KubeCon Chicago in Nov 2023</title>
    <updated>2023-10-10T00:00:00Z</updated>
    <id>https://www.keycloak.org/2023/10/keycloak-kubeconf-chicago</id>
    <link href="https://www.keycloak.org/2023/10/keycloak-kubeconf-chicago" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Red Hat Developer: An MIR-based JIT prototype for Ruby</title>
    <updated>2023-10-09T07:00:00Z</updated>
    <id>d1945731-4f23-412d-9e73-1617566944e0</id>
    <link href="https://developers.redhat.com/articles/2023/10/09/mir-based-jit-prototype-ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;I am a GCC compiler engineer, and for the past 15 years, I have primarily focused on the GCC register allocator and instruction scheduler. The major development of the GCC register allocator and instruction scheduler was completed quite some time ago, and these days, my main responsibility is maintaining these essential GCC components. About six years ago, I began dedicating half of my work time to improving performance of &lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;&lt;strong&gt;CRuby&lt;/strong&gt;&lt;/a&gt;, the de facto standard &lt;a href=&#34;https://developers.redhat.com/topics/ruby/all&#34;&gt;Ruby&lt;/a&gt; implementation. A significant portion of this effort involved implementing the CRuby just-in-time (JIT) compiler.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My initial attempt to implement a CRuby JIT was &lt;strong&gt;MJIT &lt;/strong&gt;(method based just-in-time compiler). MJIT provided a rapid way to implement JIT for CRuby. It was based on utilizing the GCC compiler, which generated machine code as &lt;a href=&#34;https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html&#34;&gt;.so files&lt;/a&gt; in the memory file system, subsequently loaded by a dynamic loader for execution. However, GCC proved to be slow as a JIT compiler. To improve MJIT compilation speed, I employedÂ &lt;a href=&#34;https://en.wikipedia.org/wiki/Precompiled_header&#34;&gt;precompiled headers&lt;/a&gt; and generated machine code in parallel with Ruby program execution. Takashi Kokubun adopted MJIT, improving it and integrating it into the CRuby release, where he continued to maintain it thereafter.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;MJIT notably improved the performance ofÂ &lt;a href=&#34;https://github.com/mame/optcarrot&#34;&gt;&lt;strong&gt;Optcarrot&lt;/strong&gt;&lt;/a&gt;, a classic Ruby benchmark, by threefold. However, it struggled to enhance performance for many widely-used applications, such as Ruby on Rails.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I dedicated a year of work to MJIT, gaining valuable experience and insights into the JIT requirements for CRuby. It became clear that developing an effective JIT for CRuby was a multi-year endeavor requiring dedicated efforts from a select few. Undaunted, I embarked on this ambitious multi-year project.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Initially, I decided to create a universal lightweight JIT compiler based on a machine-independent medium internal representation (&lt;a href=&#34;https://developers.redhat.com/blog/2020/01/20/mir-a-lightweight-jit-compiler-project&#34;&gt;&lt;strong&gt;MIR&lt;/strong&gt;&lt;/a&gt;). This compiler aimed to achieve speeds 100 times faster than GCC and generate code with performance comparable to that produced by GCC with -O2 optimizations. These goals were successfully achieved. While the MIR project has made significant strides and is already employed for JIT implementations in various programming languages, it has yet to reach its culmination. The ultimate objective of the MIR project is to simplify JIT implementation for &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_programming_language&#34;&gt;dynamic programming languages&lt;/a&gt;. MIR should facilitate code specialization and execution trace optimizations. The long-term aspiration is to develop a &lt;strong&gt;meta-tracing JIT&lt;/strong&gt; compiler for automatically generating JITs from a C-written interpreter. More detailed information on these objectives can be found in one of &lt;a href=&#34;https://developers.redhat.com/articles/2022/02/16/code-specialization-mir-lightweight-jit-compiler&#34;&gt;my previous blog posts&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My intention was to leverage the power of MIR for a new CRuby JIT, forming a part of my long-term strategy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ruby/ruby/blob/master/doc/yjit/yjit.md&#34;&gt;The introduction of Shopify &lt;strong&gt;YJIT&lt;/strong&gt;&lt;/a&gt; for CRuby a couple of years ago disrupted my long-standing strategy. In response, I accelerated the process by implementing different specializations at the instruction level of CRuby virtual machine (&lt;strong&gt;VM&lt;/strong&gt;), departing from the singular approach of MIR and incorporating the current state of the MIR JIT compiler. Last year, I introduced specialization at the VM instruction level, introducing a new collection of specialized VM instructions known as &lt;a href=&#34;https://developers.redhat.com/articles/2022/11/22/how-i-developed-faster-ruby-interpreter&#34;&gt;&lt;strong&gt;SIR&lt;/strong&gt;&lt;/a&gt;Â (specialized internal representation). Specialization is achieved throughÂ &lt;a href=&#34;https://arxiv.org/abs/1411.0352&#34;&gt;&lt;strong&gt;basic block versioning&lt;/strong&gt;&lt;/a&gt; invented by Maxime Chevalier-Boisvert and speculative techniques.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;SIR, in addition to specialization, functions as a register transfer language (RTL), whereas the original VM instructions are stack-based. Employing RTL enhances the interpreter&#39;s performance, but it&#39;s not actually necessary for improving the performance of the MIR-based JIT.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Over the past six months, I have focused on an MIR-based JIT that compiles SIR, already specialized at the interpreter level.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The success of YJIT led to a pivotal decision by my management team and me: to discontinue work on the MIR-based JIT for CRuby. The YJIT team has done an exemplary job, and their approach aligns well with the goal of further enhancing JIT performance. They are transitioning from direct machine code generation to generating internal representation (IR) and optimizing it as an intermediate step. Given Shopify&#39;s strategic interest in CRuby JIT and the ample resources dedicated to this pursuit, the future of CRuby JIT is in capable hands.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This article provides an overview of the MIR-based JIT for CRuby and summarizes the results of the unfinished project, along with my ideas for further improving MIR-based JIT and YJIT performance. I hope this post proves valuable not only to JIT developers at large but also to those specifically involved in Ruby JIT development.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;mir-based-jit-design&#34;&gt;MIR-based JIT design&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Here, I will describe the major features of the MIR-based JIT design and highlighting its differences from YJIT.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As I mentioned earlier, the majority of code specialization for the MIR-based JIT occurs at the interpreter level. This specialization encompasses type specialization, method call specialization, array element, and instance variable access specialization. Specialization is achieved through a combination of lazy basic block versioning and speculative techniques. Basic block versioning specialization incurs no additional cost, while speculative specialization requires certain guards to verify assumed specialization conditions. More comprehensive details about the specialized internal representation and this process can be found in &lt;a href=&#34;https://developers.redhat.com/articles/2022/11/22/how-i-developed-faster-ruby-interpreter&#34;&gt;my previous blog post&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Figure 1 shows a data flow diagram for the MIR-based JIT (all images can be clicked to increase their size):&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content-full-width&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/mirjit.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/mirjit.png?itok=-TCW7GiO&#34; width=&#34;863&#34; height=&#34;460&#34; alt=&#34;MIR-based CRuby JIT data flow&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 1: MIR-based JIT data flow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Components of the universal MIR JIT compiler are highlighted in green.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once the execution count of a basic block version reaches a specific threshold, it is sent to the MIR-based JIT. The behavior of YJIT differs in this aspect. When the call count for a particular method surpasses a threshold, YJIT starts JITting basic block versions of the method in a lazy manner. Essentially, YJIT will not generate machine code for a Ruby code fragment like &lt;code&gt;while i &amp;lt; 1_000_000 do i += 1; end&lt;/code&gt; unless it is within a frequently executed method. In contrast, the MIR-based JIT will certainly generate machine code for such a fragment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To provide a more accurate description of basic block generation by the MIR-based JIT, when a loop comprises a single basic block, the generated code incorporates the complete loop rather than solely the basic block of the loop. Similarly, if a basic block contains a method call consisting of only one block, the generated code can inline the entire method.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The transition between the interpreter and machine code generated by YJIT comes with a significant cost. Hence, the YJIT team has concentrated on minimizing the frequency of such transitions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Conversely, for the MIR-based JIT, the same transition is virtually cost-free. The CRuby interpreter employs aÂ &lt;a href=&#34;http://www.cs.toronto.edu/~matz/dissertation/matzDissertation-latex2html/node6.html#SECTION00630000000000000000&#34;&gt;direct dispatch technique&lt;/a&gt; using the GCC extensionÂ &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Labels-as-Values.html&#34;&gt;labels as values.&lt;/a&gt;Â Each CRuby VM instruction carries the address of the label associated with the code responsible for implementing the instruction. Figure 2 illustrates this approach.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content-full-width&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/dispatch_0.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/dispatch_0.png?itok=c-QrCMR3&#34; width=&#34;932&#34; height=&#34;580&#34; alt=&#34;Dispatch.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 2: Dispatch.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;When the MIR-based JIT generates machine code for a basic block, it reroutes the first instruction of the basic block to the machine code (see Figure 3).&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content-full-width&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/dispatch2.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/dispatch2.png?itok=w_XluLsm&#34; width=&#34;932&#34; height=&#34;580&#34; alt=&#34;Dispatch redirection diagram.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 3: Dispatch redirection.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;To improve the interpretation speed, variables that describe the execution context, such as &lt;code&gt;cfp&lt;/code&gt; (CRuby VM control frame pointer) or &lt;code&gt;pc&lt;/code&gt; (CRuby VM program counter), are allocated to specific machine registers through the use of the GCC extensionÂ &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Local-Register-Variables.html&#34;&gt;explicit local register variables&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The machine code generated by the MIR-based JIT employs the same registers for the same variables using the GCC extensionÂ &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Global-Register-Variables.html&#34;&gt;explicit global register variables&lt;/a&gt;, also implemented in MIR. This obviates the need to transfer the execution context state between the interpreter and JITted code and back. The MIR project supports a distinct call ABI, in which the MIR function can be invoked and returned through direct and indirect jumps.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;YJIT directly generates machine code from VM instructions. Only recently, YJIT&#39;s development has shifted towards optimizing an internal representation first, including at least doing register allocation, before generating machine code from that internal representation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The MIR-based JIT generates machine code through a series of steps. First, it generates C code in memory for a basic block version. Next, the C-to-MIR compiler from the MIR project generates MIR code, also in memory. Finally, the MIR code is optimized and compiled into machine code using the MIR-generator from the MIR project. While it is possible to generate MIR code directly, for the prototype, I found it more manageable to generate C code first, as it is more readable.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;mir-based-jit-performance&#34;&gt;MIR-based JIT performance&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;To assess the performance of the MIR-based JIT, I conducted benchmarks on the following:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;base: the base interpreter (&lt;code&gt;miniruby&lt;/code&gt;)&lt;/li&gt;&#xA;&#x9;&lt;li&gt;sir: the interpreter with specialized internal representation (&lt;code&gt;miniruby --sir&lt;/code&gt;)&lt;/li&gt;&#xA;&#x9;&lt;li&gt;yjit: YJIT (&lt;code&gt;miniruby --yjit&lt;/code&gt;)&lt;/li&gt;&#xA;&#x9;&lt;li&gt;mir: MIR-based JIT (&lt;code&gt;miniruby --mirjit&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;All measurements were conducted on an Intel i5-13600K with 64 GB of memory under x86-64 Fedora Core 36.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I employed the following micro-benchmarks (located in theÂ &lt;a href=&#34;https://github.com/vnmakarov/ruby/tree/sir-mirjit/sir-bench&#34;&gt;sir-bench&lt;/a&gt; directory):&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;aread: reading an instance variable throughÂ &lt;code&gt;attr_reader&lt;/code&gt;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;aref: reading an array element&lt;/li&gt;&#xA;&#x9;&lt;li&gt;aset: assignment to an array element&lt;/li&gt;&#xA;&#x9;&lt;li&gt;awrite: assignment to an instance variable throughÂ &lt;code&gt;attr_writer&lt;/code&gt;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;bench: a rendering benchmark&lt;/li&gt;&#xA;&#x9;&lt;li&gt;call: empty method calls&lt;/li&gt;&#xA;&#x9;&lt;li&gt;complex-mandelbrot: complex number version of mandelbrot&lt;/li&gt;&#xA;&#x9;&lt;li&gt;const2: readingÂ &lt;code&gt;Class::Const&lt;/code&gt;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;const: reading Const&lt;/li&gt;&#xA;&#x9;&lt;li&gt;fannk: fannkuch&lt;/li&gt;&#xA;&#x9;&lt;li&gt;fib: fibonacci&lt;/li&gt;&#xA;&#x9;&lt;li&gt;ivread: reading an instance variable (&lt;code&gt;@var&lt;/code&gt;)&lt;/li&gt;&#xA;&#x9;&lt;li&gt;ivwrite: assignment to an instance variable&lt;/li&gt;&#xA;&#x9;&lt;li&gt;mandelbrot: non-complex version of mandelbrot&lt;/li&gt;&#xA;&#x9;&lt;li&gt;meteor: meteor puzzle&lt;/li&gt;&#xA;&#x9;&lt;li&gt;nbody: modeling planet orbits&lt;/li&gt;&#xA;&#x9;&lt;li&gt;nest-ntimes: nestedÂ &lt;code&gt;ntimes&lt;/code&gt;Â loops (6 levels)&lt;/li&gt;&#xA;&#x9;&lt;li&gt;nest-while: nested while loops (6 levels)&lt;/li&gt;&#xA;&#x9;&lt;li&gt;norm: spectral norm&lt;/li&gt;&#xA;&#x9;&lt;li&gt;pent: pentamino puzzle&lt;/li&gt;&#xA;&#x9;&lt;li&gt;red-black: red-black trees&lt;/li&gt;&#xA;&#x9;&lt;li&gt;sieve: Eratosthenes sieve&lt;/li&gt;&#xA;&#x9;&lt;li&gt;trees: binary trees&lt;/li&gt;&#xA;&#x9;&lt;li&gt;while: while loop&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;The hot code for each micro-benchmark was encapsulated within a Ruby method, which was invoked sufficiently to trigger machine code generation by YJIT (as previously mentioned, YJIT initiates code generation only from calls to frequently executed methods). Each benchmark was executed three times, and the minimum time (or smallest maximum resident memory) was selected. Figure 4 presents the wall execution time for the micro-benchmarks:&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content-full-width&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/mir-wall.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/mir-wall.png?itok=JCo0D8wJ&#34; width=&#34;1152&#34; height=&#34;576&#34; alt=&#34;x86-64 micro-benchmarks.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 4: x86-64 micro-benchmarks.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The CPU time remains consistent, as YJIT and the MIR-based JIT do not operate concurrently with Ruby program execution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Furthermore, Figure 5 illustrates the maximum resident memory increase relative to the base interpreter on the Intel CPU machine.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/mir-mem.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/mir-mem.png?itok=ojrwL5Kb&#34; width=&#34;576&#34; height=&#34;480&#34; alt=&#34;Max resident memory.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 5: Max resident memory.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;It is apparent that MIR-based JIT consumes more memory than YJIT. MIR-based JIT allocates a substantial amount of memory in advance for basic block versions (BBVs). This primarily contributes to the observed results. While YJIT previously encountered a similar issue, it was recently resolved. This is an aspect where further improvement can be made in the MIR-based JIT.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The MIR JIT compiler generates code for x86-64, aarch64, ppc64, riscv64, and s390x architectures. Thus, I also evaluated MIR-based JIT on another architecture. I conducted the benchmarks on aarch64 Fedora Core 34 within a virtual machine (UTM) on an M1 Apple Mac mini with 16 GB memory, operating under macOS. Due to the virtual machine environment, the accuracy of these results might be somewhat diminished. The outcomes are presented in Figure 6.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content-full-width&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/mir-wall-arm64.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/mir-wall-arm64.png?itok=cZ23jdcM&#34; width=&#34;1152&#34; height=&#34;576&#34; alt=&#34;ARM64 micro-benchmarks&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 6: ARM64 micro-benchmarks.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Additionally, I tested the classical Ruby mid-sized benchmark, Optcarrot,Â using 3,000 frames. Figure 7 shows the x86-64 results.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content-full-width&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/carrot_0.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/carrot_0.png?itok=AHxOGbBC&#34; width=&#34;576&#34; height=&#34;480&#34; alt=&#34;OptCarrot&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 7: OptCarrot.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;It would be ideal to present performance enhancements for widely used real-world applications here. However, SIR, the foundation on which MIR-based JIT operates, is not yet prepared for such reporting. While the SIR interpreter successfully passes all basic CRuby tests (approximately 2,000 tests), it struggles with a significant number of tests from the extended CRuby test suite (roughly 25,000 tests).&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;ideas-to-improve-mir-based-cruby-jit-performance&#34;&gt;9 ideas to improve MIR-based CRuby JIT performance&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Here are my suggestions for improving the MIR-based JIT, ordered by importance.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;1. Trace JIT and inlining&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The MIR-based JIT currently generates code for individual basic blocks (BBs). To enhance performance, we could identify traces of frequently executed BBs and re-jit these traces as a whole. This could substantially enhance code performance by improving code locality and enabling comprehensive optimization by the MIR-generator for the entire trace.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Typical Ruby code consists of numerous method calls. To generate longer traces and traces containing loops, call inlining needs to be performed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Many of Ruby&#39;s standard methods are implemented in &lt;a href=&#34;https://developers.redhat.com/topics/c&#34;&gt;C&lt;/a&gt;. To inline them, we must translate this C code into an internal representation, from which the JIT forms traces for optimization. This translation can be achieved by manually converting the C code into the internal representation or employing a C-to-IR translator. For MIR, the existing C-to-MIR translator could be used. For YJIT&#39;s internal representation, a new LLVM IR to YJIT IR translator might be necessary. However, this approach would likely require significant restructuring of the existing CRuby code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another approach to inline standard methods could involve translating the methods implemented in C code into Ruby code. To achieve better performance with the generated code, these methods need to be treated in a way that avoids the creation of CRuby control frames, as this process consumes considerable time. In any case, the second approach to inlining will likely yield worse generated code than the first one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I believe it&#39;s worth considering a hybrid approach, wherein widely-used iterator methods are translated into the IR, while less frequently used methods are rewritten in Ruby.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2. Polymorhic caches&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;In the current MIR-based JIT, call (or instance variable access) instructions cache only one method (or instance variable). The generated code reverts to the interpreter if the method is not present in the cache. Implementing caching for multiple methods could enhance the performance of machine code produced by the MIR-based JIT. YJIT has already employed this technique, and this is the major reason why YJIT outperforms the MIR-based JIT in benchmarks such as tree, red-black, and optcarrot.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;3. Optimized local variable handling&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The current MIR-based JIT always reads and writes CRuby local variable values from the CRuby VM stack. A more efficient approach would be to maintain CRuby local variables in MIR registers, which would likely be assigned to CPU registers. This synchronization between registers and the CRuby VM stack should occur only when there is a genuine transition from generated code to interpretation. This would speed up the generated code by reducing memory access and the notifications sent to CRuby&#39;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)&#34;&gt;generational GC&lt;/a&gt; about new heap objects.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;4. Dynamic memory allocation for BBVs&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Currently, significant memory is allocated ahead for Basic Block Versions (BBVs) of each Ruby method, even when it might not be necessary. While this simplifies MIR-based JIT and SIR interpreter development, a more optimal approach would be to allocate memory for each BBV on a demand basis, akin to YJIT&#39;s recently implemented optimization, which notably improved its performance.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;5. Delayed BBV generation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;BBVs are re-jitted when changed, which can happen when the destination BBV is generated, and the branch destination in a given BBV is modified. Since BBVs are generated lazily, this process can generate redundant code. Delaying BBV generation until all or most destination BBVs are created could mitigate the need for re-jitting.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;6. Generated code memory management&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Presently, there are no constraints on the size of generated BBV code. For large Ruby programs, this could lead to excessive memory consumption for generated code. Implementing a memory limit for generated code size and removing less frequently used generated code when the limit is reached would optimize memory utilization.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;7. Direct MIR code generation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Instead of generating C code for BBVs, the MIR-based JIT could generate MIR code directly. This would enhance compilation speed, reduce memory usage during JIT operation, and decrease the code size of CRuby with MIR-based JIT, albeit only slightly (by around 5%, based on my estimation).&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;8. Floating point calculation optimization&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;While not the typical domain for Ruby applications, performance in floating-point calculations could be improved by eliminating unnecessary transformations of IEEE-doubles to/from CRuby values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;CRuby employs tagged values where floating-point values on 64-bit machines have the two least significant bits (a tag) set to &#39;10&#39;. To put IEEE-double into CRuby value, two mantissa bits, used for the tag, are stored in the exponent, thus reducing the exponent range. IEEE-double values that cannot be put into the CRuby value are stored in the heap.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Currently, CRuby VM arithmetic instructions unpack IEEE-double operands from CRuby values and pack the result back. Avoiding this packing/unpacking (referred to as boxing/unboxing) for subsequent arithmetic instructions within a basic block could improve the performance of floating point calculations.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;9. Parallel code generation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Presently, Ruby program execution halts when the MIR-based JIT or YJIT commences generating machine code. Enhancing performance could involve generating code in parallel with Ruby program interpretation. While this could improve the wall time of execution for Ruby programs, it could also introduce complexities and might not be beneficial for server-based applications with numerous long-running Ruby instances that fully utilize all available CPUs.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The MIR-based CRuby JIT can be found inÂ &lt;a href=&#34;https://github.com/vnmakarov/ruby&#34;&gt;this repository&lt;/a&gt;. You are welcome to use the JIT sources for any purpose you desire.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Implementing a high-performance CRuby JIT is an exceptionally challenging endeavor. Furthermore, it&#39;s a task too immense for a single individual to tackle. Fortunately, Shopify possesses an ample pool of human resources for such an undertaking. The success achieved by the Shopify YJIT team has led to a decision to halt my efforts on the MIR-based JIT for CRuby. However, I have no regrets regarding my work on the MIR-based JIT. The experience gained through this endeavor has enriched my understanding of JITs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My engagement with CRuby JIT has provided valuable insights into ways further to enhance the performance of both YJIT and MIR-based JIT. Foremost among these insights is the optimization of frequently executed traces and the inlining of method calls, including standard Ruby methods written in C.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope the Shopify YJIT team will implement the tracing JIT or someone within the Ruby community will take on this task someday. The Ruby community is a formidable driving force that contributes to the resilience of the Ruby project!&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/09/mir-based-jit-prototype-ruby&#34; title=&#34;An MIR-based JIT prototype for Ruby&#34;&gt;An MIR-based JIT prototype for Ruby&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>Red Hat Developer: Load balancing, threading, and scaling in Node.js</title>
    <updated>2023-10-09T07:00:00Z</updated>
    <id>13a0b0fc-74fe-4f0a-9a6a-5c3d3a10edd0</id>
    <link href="https://developers.redhat.com/articles/2023/10/09/load-balancing-threading-and-scaling-nodejs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Many applications require more computation than can be handled by a single thread, CPU, process, or machine. This installment of the ongoing &lt;a href=&#34;https://github.com/nodeshift/nodejs-reference-architecture&#34;&gt;Node.js reference architecture&lt;/a&gt; series covers the team&#39;s experience on how to satisfy the need for larger computational resources in your &lt;a href=&#34;topics/nodejs&#34;&gt;Node.js&lt;/a&gt; application.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Follow the series:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li aria-level=&#34;1&#34;&gt;Part 1: &lt;a href=&#34;https://developers.redhat.com/blog/2021/03/08/introduction-to-the-node-js-reference-architecture-part-1-overview&#34;&gt;Overview of the Node.js reference architecture&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 2: &lt;a href=&#34;https://developer.ibm.com/blogs/nodejs-reference-architectire-pino-for-logging/&#34;&gt;Logging in Node.js&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 3: &lt;a href=&#34;https://developers.redhat.com/articles/2021/05/17/introduction-nodejs-reference-architecture-part-3-code-consistency&#34;&gt;Code consistency in Node.js&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 4: &lt;a href=&#34;https://developers.redhat.com/articles/2021/06/22/introduction-nodejs-reference-architecture-part-4-graphql-nodejs&#34;&gt;GraphQL in Node.js&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 5: &lt;a href=&#34;https://developers.redhat.com/articles/2021/08/26/introduction-nodejs-reference-architecture-part-5-building-good-containers&#34;&gt;Building good containers&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 6: &lt;a href=&#34;https://developers.redhat.com/articles/2021/12/03/introduction-nodejs-reference-architecture-part-6-choosing-web-frameworks&#34;&gt;Choosing web frameworks&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 7: &lt;a href=&#34;https://developers.redhat.com/articles/2022/03/02/introduction-nodejs-reference-architecture-part-7-code-coverage&#34;&gt;Code coverage&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 8: &lt;a href=&#34;https://developers.redhat.com/articles/2022/04/11/introduction-nodejs-reference-architecture-part-8-typescript&#34;&gt;Typescript&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 9: &lt;a href=&#34;https://developers.redhat.com/articles/2022/08/09/8-elements-securing-nodejs-applications&#34;&gt;Securing Node.js applications&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 10: &lt;a href=&#34;https://developers.redhat.com/articles/2022/11/03/nodejs-reference-architecture-part-10-accessibility&#34;&gt;Accessibility&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 11: &lt;a href=&#34;https://developers.redhat.com/articles/2022/12/21/typical-development-workflows&#34;&gt;Typical development workflows&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 12: &lt;a href=&#34;https://developers.redhat.com/articles/2023/02/22/installing-nodejs-modules-using-npm-registry&#34;&gt;npm development&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 13: &lt;a href=&#34;https://developers.redhat.com/articles/2023/03/21/how-investigate-7-common-problems-production#&#34;&gt;Problem determination&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 14: &lt;a href=&#34;https://developers.redhat.com/articles/2023/07/27/introduction-nodejs-reference-architecture-testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Part 15: &lt;a href=&#34;https://developers.redhat.com/articles/2023/07/31/how-handle-transactions-nodejs-reference-architecture&#34;&gt;Transaction handling&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;Part 16: Load balancing, threading, and scaling&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;h2&gt;But Node.js is single threaded?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Node.js is said to be single-threaded. While not entirely true, it reflects that most work is done on a single thread running the event loop. The asynchronous nature of &lt;a href=&#34;https://developers.redhat.com/topics/javascript&#34;&gt;JavaScript&lt;/a&gt; means that Node.js can handle a larger number of concurrent requests on that single thread. If that is the case, then why are we even talking about threading?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;While by default a Node.js process operates in a single-threaded model, current versions of Node.js support &lt;a href=&#34;https://nodejs.org/api/worker_threads.html&#34;&gt;worker threads &lt;/a&gt;that you can use to start additional threads of execution, each with their own event loop.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In addition, Node.js applications are often made up of multiple different &lt;a href=&#34;https://developers.redhat.com/topics/microservices/&#34;&gt;microservices&lt;/a&gt; and multiple copies of each microservice, allowing the overall solution to leverage many concurrent threads available in a single computer or across a group of computers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The reality is that applications based on Node.js can and do leverage multiple threads of execution over one or more computers. How to balance this work across threads, processes, and computers and scale it in times of increased demand is an important topic for most deployments.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Keep it simple&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The team&#39;s experience is that, when possible, applications should be designed so that a request to a microservice running in a &lt;a href=&#34;https://developers.redhat.com/topics/containers&#34;&gt;container&lt;/a&gt; will need no more than a single thread of execution to complete in a reasonable time. If that is not possible, then worker threads are the recommended approach versus multiple processes running in a single container as there will be lower complexity and less overhead communicating between multiple threads of execution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Worker threads are also likely appropriate for desktop-type applications where it is known that you cannot scale beyond the resources of a single machine, and it is preferable to have the application show up as a single process instead of many individual processes.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Long-running requests&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The team had a very interesting discussion around longer-running requests. Sometimes, you need to do computation that will take a while to complete, and you cannot break up that work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The discussion centered around the following question: If we have a separate microservice that handles longer running requests and it&#39;s okay for all requests of that type to be handled sequentially, can we just run those on the main thread loop?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most often, the answer turns out to be no because even in that case, you typically have other APIs like health and readiness APIs that need to respond in a reasonable amount of time when the microservice is running. If you have any request that is going to take a substantial amount of time versus completing quickly or blocking asynchronously so other work can execute on the main thread, you will need to use worker threads.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Load balancing and scaling&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;For requests that are completed in a timely manner, you might still need more CPU cycles than a single thread can provide in order to keep up with a larger number of requests. When implementing API requests in Node.js, they are most often designed to have no internal state, and multiple copies can be executed simultaneously. Node.js has long supported running multiple processes to allow concurrent execution of the requests through the &lt;a href=&#34;https://nodejs.org/api/cluster.html&#34;&gt;Cluster&lt;/a&gt; API.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As you have likely read in other parts of the Node.js reference architecture, most modern applications run in containers, and often, those containers are managed through tools like Kubernetes. In this context, the team recommends delegating load balancing and scaling to the highest layer possible instead of using the Cluster API. For example, if you deploy the application to Kubernetes, use the load balancing and scaling built into Kubernetes. In our experience, this has been just as efficient or more efficient than trying to manage it at a lower level through tools like the Cluster API.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Threads versus processes&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;A common question is whether it is better to scale using threads or processes. Multiple threads within a single machine can typically be exploited within a single process or by starting multiple processes. Processes provide better isolation, but also lower opportunities to share resources and make communication between threads more costly. Using multiple threads within a process might be able to scale more efficiently within a single process, but it has the hard limit of only being able to scale to the resources provided by a single machine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As described in earlier sections, the team&#39;s experience is that using worker threads when needed but otherwise leaving load balancing and scaling to management layers outside of the application itself (for example, Kubernetes) results in the right balance between the use of threads and processes across the application.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Learn more about Node.js reference architecture&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I hope that this quick overview of the &lt;a href=&#34;https://github.com/nodeshift/nodejs-reference-architecture/blob/main/docs/functional-components/scaling-multi-threading.md&#34;&gt;load balancing, scaling and multithreading&lt;/a&gt; part of the Node.js reference architecture, along with the team discussions that led to that content, has been helpful, and that the information shared in the architecture helps you in your future implementations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We plan to cover new topics regularly for the Node.js reference architecture series. Until the next installment, we invite you to visit the &lt;a href=&#34;https://github.com/nodeshift/nodejs-reference-architecture&#34;&gt;Node.js reference architecture repository&lt;/a&gt; on GitHub, where you will see the work we have done and future topics.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To learn more about what Red Hat is up to on the Node.js front, check out our &lt;a href=&#34;https://developers.redhat.com/topics/nodejs&#34;&gt;Node.js page&lt;/a&gt;.&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/09/load-balancing-threading-and-scaling-nodejs&#34; title=&#34;Load balancing, threading, and scaling in Node.js&#34;&gt;Load balancing, threading, and scaling in Node.js&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>Quarkus: Processing Kafka records on virtual threads</title>
    <updated>2023-10-09T00:00:00Z</updated>
    <id>https://quarkus.io/blog/virtual-threads-4/</id>
    <link href="https://quarkus.io/blog/virtual-threads-4/" rel="alternate"></link>
    <summary type="html">In another blog post, we have seen how you can implement a CRUD application with Quarkus to utilize virtual threads. The virtual threads support in Quarkus is not limited to REST and HTTP. Many other parts support virtual threads, such as gRPC, scheduled tasks, and messaging. In this post, we...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Processing Kafka records on virtual threads</title>
    <updated>2023-10-09T00:00:00Z</updated>
    <id>https://quarkus.io/blog/virtual-threads-4/</id>
    <link href="https://quarkus.io/blog/virtual-threads-4/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: How to solve the error java.net.SocketException: Connection reset</title>
    <updated>2023-10-06T11:40:04Z</updated>
    <id>https://www.mastertheboss.com/java/how-to-solve-the-error-java-net-socketexception-connection-reset/</id>
    <link href="https://www.mastertheboss.com/java/how-to-solve-the-error-java-net-socketexception-connection-reset/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Red Hat Developer: Use fwupd to deploy Linux firmware updates and more</title>
    <updated>2023-10-06T07:00:00Z</updated>
    <id>b2def651-6552-4b46-a5f6-ca44020e7973</id>
    <link href="https://developers.redhat.com/articles/2023/10/06/use-fwupd-deploy-linux-firmware-updates-and-more" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The &lt;a href=&#34;https://github.com/fwupd/fwupd&#34;&gt;fwupd project&lt;/a&gt; is an open source framework that allows end users to update firmware on thousands of different devices. Although it was initially designed for the laptop and desktop use case, it is now being used on everything from Chromebooks, IoT devices, mobile phones, and headless servers in datacenters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;While the desktop UX flow of pop-up notifications, graphical application buttons, and progress bars is fully implemented in &lt;a href=&#34;https://developers.redhat.com/products/rhel/overview&#34;&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL), the &#34;embedded&#34; use cases where firmware is being auto-deployed to hundreds of servers in a datacenter, or thousands of edge nodes buried under the ground is less well defined. Rather than trying to cater for every possible use case, we instead made it possible to build a lightweight policy agent written in an existing high-level language with the desired customer business logic. This might include something like &#34;download metadata and updates from a NFS server, deploy the update to 50% of devices on each day.&#34;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although updating firmware is the primary focus of fwupd, there is also another equally important task it performs on every machine start: calculating the platform security level. These checks build a Host Security Index ranging from 0 (critically insecure) to 4 (very secure) on supported machines, which allows UI components like gnome-control-center to show high-level translated issues to the end user (as shown in Figure 1)âsome of which can be fixed by fwupd automatically. These might include UEFI SecureBoot being turned off, or a misconfiguration of the BootGuard configuration by the OEM. If the Host Security Index changes, for example, from &lt;code&gt;HSI-3&lt;/code&gt; to &lt;code&gt;HSI-0&lt;/code&gt;, then this should cause some kind of notification for investigation as the security level of the platform has critically degraded.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;align-center media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/screenshot_from_2023-06-06_14-24-21_0.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/screenshot_from_2023-06-06_14-24-21_0.png?itok=NFJwuT6h&#34; width=&#34;522&#34; height=&#34;512&#34; alt=&#34;GNOME Control Center Device Security panel&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;field field--name-field-caption field--type-string field--label-hidden field__items&#34;&gt;&#xA;      &lt;div class=&#34;rhd-c-caption field__item&#34;&gt;Figure 1: gnome-control-center Device Security panel.&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;h2&gt;Vendor update process&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The firmware updates themselves are uploaded by the OEM or ODM vendor to the Linux Vendor Firmware Service. There, they are verified, analyzed, checked, signed and then added to a metadata catalog that is downloaded by a fwupd front end (such as gnome-software GUI, or &lt;code&gt;fwupdmgr&lt;/code&gt; on the command line) and then sent to the fwupd daemon over a &lt;a href=&#34;https://en.wikipedia.org/wiki/D-Bus&#34;&gt;D-Bus socket&lt;/a&gt;. The daemon then processes the metadata, calculating any ordering dependencies and checking system requirements before offering the client a list of possible firmware updates for each enumerated device.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Each update payload archive is then downloaded by the front-end client at a convenient time, possibly using idle bandwidth. The archive is then sent to the daemon over a socket, where the daemon decompresses the archive, verifies the payload is designed for the target device, re-checks any requirements, and then gets ready to deploy the payload onto the device. The user is notified of any required action. This might be opening the laptop lid or removing then reinserting the USB cable; in most cases, no manual interaction is required. The update is then either deployed to the device &#34;live&#34; (typical for USB devices) or a reboot is scheduled to perform the update &#34;offline&#34;âtypically for UEFI updates. The device will return with the new firmware version installed, and fwupd will then record the failure or success in its internal database.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using a service like &lt;a href=&#34;https://developers.redhat.com/products/ansible/lightspeed&#34;&gt;Ansible&lt;/a&gt; and the existing CLI tools like &lt;code&gt;fwupdmgr&lt;/code&gt; works well, but sometimes an agent running on the actual machine is a more appropriate methodâeither from a scalability point of view or so that it can work alongside existing (perhaps proprietary) tools running on the host.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Parsing console output&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The simplest way to interact with fwupd as a developer is to use the existing CLI tools and then scrape the stdout output in JSON format. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;$ fwupdmgr get-devices --json&#xA;{&#xA;  &#34;Devices&#34;: [&#xA;    {&#xA;      &#34;Name&#34;: &#34;USB2.0 Hub&#34;,&#xA;      &#34;DeviceId&#34;: &#34;7622d5fdbf1d1e08138156da7d83bf693986ad16&#34;,&#xA;      &#34;ParentDeviceId&#34; : &#34;b5540761dfe33d9abccd3bb21f1d725f9e69f541&#34;,&#xA;      &#34;CompositeId&#34; : &#34;b5540761dfe33d9abccd3bb21f1d725f9e69f541&#34;,&#xA;      &#34;InstanceIds&#34;: [&#xA;        &#34;USB\\VID_17EF&amp;amp;PID_3080&#34;,&#xA;        &#34;USB\\VID_17EF&amp;amp;PID_3080&amp;amp;REV_5163&#34;,&#xA;        &#34;USB\\VID_17EF&amp;amp;PID_3080&amp;amp;HUB_20&#34;,&#xA;        &#34;USB\\VID_17EF&amp;amp;PID_3080&amp;amp;SPI_C220&#34;,&#xA;        &#34;USB\\VID_17EF&amp;amp;PID_3080&amp;amp;SPI_C220&amp;amp;REV_5163&#34;,&#xA;        &#34;USB\\VID_17EF&amp;amp;PID_3080&amp;amp;DEV_VL820Q7&#34;&#xA;      ],&#xA;      &#34;Guid&#34;: [&#xA;        &#34;8ee94f0e-9b44-596a-bdd9-6f90401664cc&#34;,&#xA;        &#34;35199e34-cf82-5b09-9287-622d225056e4&#34;,&#xA;        &#34;0987e3c9-b1ee-5763-ac6e-51329b034e4b&#34;,&#xA;        &#34;163cea66-5a78-58af-80ba-21be960aae5c&#34;,&#xA;        &#34;c7def18d-66ae-5531-924b-2020c3638181&#34;&#xA;      ],&#xA;      &#34;Summary&#34;: &#34;USB 3.x hub&#34;,&#xA;      &#34;Plugin&#34;: &#34;vli&#34;,&#xA;      &#34;Protocol&#34; : &#34;com.vli.usbhub&#34;,&#xA;      &#34;Flags&#34;: [&#xA;        &#34;updatable&#34;,&#xA;        &#34;registered&#34;,&#xA;        &#34;can-verify&#34;,&#xA;        &#34;can-verify-image&#34;,&#xA;        &#34;dual-image&#34;,&#xA;        &#34;self-recovery&#34;,&#xA;        &#34;add-counterpart-guids&#34;,&#xA;        &#34;unsigned-payload&#34;&#xA;      ],&#xA;      &#34;Vendor&#34;: &#34;VIA Labs, Inc.&#34;,&#xA;      &#34;VendorId&#34; : &#34;USB:0x17EF&#34;,&#xA;      &#34;Version&#34;: &#34;51.63&#34;,&#xA;      &#34;VersionFormat&#34; : &#34;bcd&#34;,&#xA;      &#34;VersionRaw&#34;: 20835,&#xA;      &#34;Icons&#34;: [&#xA;        &#34;usb-hub&#34;&#xA;      ],&#xA;      &#34;InstallDuration&#34; : 15,&#xA;      &#34;Created&#34;: 1686048073&#xA;    },&#xA;â¦&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Most of the fwupdmgr commands (e.g., &lt;code&gt;get-releases&lt;/code&gt;, &lt;code&gt;get-updates&lt;/code&gt;, &lt;code&gt;get-remotes&lt;/code&gt;) can display the JSON output like above. The format is API stable and fields will only be &lt;strong&gt;added&lt;/strong&gt; in the future. There are obvious downsides to consuming the information like this; it&#39;s not efficient for the application to spawn several new fwupdmgr processes, each of which talks to the daemon using D-Bus and converts the output to JSON for it to be parsed back into memory-loaded objects. We also don&#39;t get any information about what the daemon is doing, as it might not already be running. The daemon can also auto-quit on idle, so it might take a few seconds to start.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There has to be a much better way to communicate with the daemon directly, perhaps just using D-Bus directly. Using raw D-Bus calls would work very well. However, it would be very verbose and error proneâyou&#39;d have to be comfortable unwrapping dictionaries of dictionaries (of dictionaries!) and handling all the type conversions manually. It&#39;s also non-trivial to send a file descriptor using raw D-Bus, and that&#39;s what we&#39;ll have to do when updating the metadata and deploying firmware onto devices.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Using higher-level languages&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;With GObject introspection, we can use the libfwupd library (written in &lt;a href=&#34;https://developers.redhat.com/topics/c&#34;&gt;C&lt;/a&gt;) from any higher-level language like &lt;a href=&#34;https://developers.redhat.com/topics/go&#34;&gt;Go&lt;/a&gt;, &lt;a href=&#34;https://developers.redhat.com/topics/python&#34;&gt;Python&lt;/a&gt;, or even &lt;a href=&#34;https://developers.redhat.com/topics/javascript&#34;&gt;JavaScript&lt;/a&gt;. The C library carefully defines the memory ownership of each parameter and return value so that the higher-level language can safely call into the C interface. For instance, in Python:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-python&#34;&gt;import gi&#xA;gi.require_version(&#34;Fwupd&#34;, &#34;2.0&#34;)&#xA;from gi.repository import Fwupd&#xA;from gi.repository import Gio&#xA;client = Fwupd.Client.new()&#xA;client.set_feature_flags(Fwupd.FeatureFlags.NONE)&#xA;cancellable = Gio.Cancellable.new()&#xA;for dev in client.get_devices(cancellable):&#xA;    print(f&#34;{dev.get_id()}: {dev.get_name()}&#34;)&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;...gives us:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-python&#34;&gt;$ ./hardware.py&#xA;7622d5fdbf1d1e08138156da7d83bf693986ad16: USB2.0 Hub&#xA;b0d4430dfa6bde9f0c22680df36dbc8c15c80753: BootGuard Configuration&#xA;a45df35ac0e948ee180fe216a5f703f32dda163f: System Firmware&#xA;362301da643102b9f38477387e2193e57abaa590: UEFI dbx&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;All the data available in the JSON dump is available, as are the same helpers that fwupd uses to filter and query devices. The API docs &lt;a href=&#34;https://fwupd.github.io/libfwupd/&#34;&gt;can be found online&lt;/a&gt; with each method, signal, and property documented. Using this API, it is possible to enable remotes, send files using file descriptors, and update device firmware. Signals can be connected using async mainloop code like &lt;code&gt;client.connect(&#34;notify::percentage&#34;, _percentage_cb)&lt;/code&gt;, which even allows handling the progress dialogs and interactive user requests.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A more useful example is to update the UEFI DBX list to &lt;a href=&#34;https://access.redhat.com/security/blacklotus_uefi_bootkit&#34;&gt;mitigate the BlackLotus security issue&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;# the SHA1 is the Device ID for the UEFI dbx device&#xA;client.install(&#34;362301da643102b9f38477387e2193e57abaa590&#34;,&#xA;               &#34;/usr/share/dbxtool/DBXUpdate-20230509-x64.cab&#34;,&#xA;               Fwupd.InstallFlags.ALLOW_REINSTALL,&#xA;               cancellable)&#xA;print(dev.get_update_state())&#xA;#&amp;lt;enum FWUPD_UPDATE_STATE_NEEDS_REBOOT of type Fwupd.UpdateState&gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This shows deploying the update onto the local machine and then getting the device update state, which indicates that a reboot is required before the device version is updated to the new value. Notably, before deploying the update, fwupd will also check the contents of the EFI System Partition to ensure the update is safe to apply.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Querying platform security attributes&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Although some fwupd security attribute information is available in Red Hat Insights, it&#39;s also available from the JSON output, the D-Bus interface, and using GObject Introspectionâjust like the device data. For example, on the console, the &lt;code&gt;fwupdmgr security&lt;/code&gt; output shows sections for each HSI security level. Each level has attributes, each with a status that indicates either a pass or fail. On most server, desktop, and laptop systems, this would look similar to what is shown in Figure 2.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;align-center media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/screenshot_from_2023-06-06_14-04-39_1.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/screenshot_from_2023-06-06_14-04-39_1.png?itok=SaDu1Leg&#34; width=&#34;600&#34; height=&#34;922&#34; alt=&#34;Screenshot of fwupdmgr security console output&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;field field--name-field-caption field--type-string field--label-hidden field__items&#34;&gt;&#xA;      &lt;div class=&#34;rhd-c-caption field__item&#34;&gt;Figure 2: Screenshot of fwupdmgr security console output.&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;p&gt;But with &lt;code&gt;fwupdmgr security --json&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;â¦&#xA;{&#xA;  &#34;AppstreamId&#34; : &#34;org.fwupd.hsi.EncryptedRam&#34;,&#xA;  &#34;Created&#34;: 1686056222,&#xA;  &#34;HsiLevel&#34;: 4,&#xA;  &#34;HsiResult&#34;: &#34;not-supported&#34;,&#xA;  &#34;Name&#34;: &#34;Encrypted RAM&#34;,&#xA;  &#34;Description&#34;: &#34;Encrypted RAM makes it impossible for information that is stored in device memory to be read if the memory chip is removed and accessed.&#34;,&#xA;  &#34;Plugin&#34;: &#34;cpu&#34;,&#xA;  &#34;Uri&#34; : &#34;https://fwupd.github.io/libfwupdplugin/hsi.html#org.fwupd.hsi.EncryptedRam&#34;,&#xA;  &#34;Guid&#34;: [&#xA;    &#34;b9a2dd81-159e-5537-a7db-e7101d164d3f&#34;,&#xA;    &#34;30249f37-d140-5d3e-9319-186b1bd5cac3&#34;,&#xA;    &#34;a45b0522-5722-54bd-b802-86cd044262df&#34;,&#xA;    &#34;7b9b6e8c-226c-5db6-86cb-ea3187578013&#34;&#xA;  ]&#xA;}&#xA;â¦&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or with GObject Introspection:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;for attr in client.get_host_security_attrs(cancellable):&#xA;    print(f&#34;{attr.to_string()}&#34;)&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The fwupd project is a mature, safe, and reliable service that can easily be integrated into existing security endpoint solutions and deployment agents. Using three different methods, developers can enumerate devices, query security levels, and control the fwupd daemon to deploy firmware updates.&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/06/use-fwupd-deploy-linux-firmware-updates-and-more&#34; title=&#34;Use fwupd to deploy Linux firmware updates and more&#34;&gt;Use fwupd to deploy Linux firmware updates and more&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>Red Hat Developer: Try Camel on Quarkus in the Developer Sandbox for Red Hat OpenShift</title>
    <updated>2023-10-06T07:00:00Z</updated>
    <id>c7e19de1-859c-41da-bf71-75056f779eea</id>
    <link href="https://developers.redhat.com/articles/2023/10/06/try-camel-quarkus-developer-sandbox-red-hat-openshift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;You can now try Apache Camel on &lt;a href=&#34;https://developers.redhat.com/products/quarkus&#34;&gt;Quarkus&lt;/a&gt; in the &lt;a href=&#34;https://developers.redhat.com/developer-sandbox/&#34; target=&#34;_blank&#34;&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt;, anÂ &lt;a href=&#34;https://developers.redhat.com/products/openshift/overview&#34; target=&#34;_blank&#34;&gt;OpenShift&lt;/a&gt; environment you can access for a no-cost, hands-on experience in building and deploying cloud-native applications quickly. This article will guide you to the Developer Sandbox and through a Camel Quarkus integration in a fully web-based experienceâno local installs needed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Camel Quarkus is the latest Camel runtime generation. It allows you to run integration processes with super-low memory usage, fast startup, and outstanding performance. The article &lt;a href=&#34;https://developers.redhat.com/articles/2021/12/06/boost-apache-camel-performance-quarkus&#34; target=&#34;_blank&#34;&gt;Boost Apache Camel performance on Quarkus&lt;/a&gt; introduces the topic well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To learn more about the various Camel runtimes available, read the 3-part series article &lt;a href=&#34;https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1&#34; target=&#34;_blank&#34;&gt;Choose the best Camel for your integration ride&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;REST and SOAP with Camel on Quarkus&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;One recent addition to Camel Quarkus is the ability to perform SOAP operations using Apache CXF, a well-known Java library historically used by Camel but only recently available for Quarkus.Â &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The demo defines a front-facing OpenAPI service called &lt;strong&gt;simple&lt;/strong&gt;, which integrates with a back-end SOAP service. The code also includes the stub to simulate the SOAP endpoint. The flow showcases an adaptation layer from REST to SOAP. Itâs a relatively simple use case but very common in the enterprise. It defines a REST API and hides a legacy service behind the scenes (Figure 1).&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/camel-quarkus.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/camel-quarkus.png?itok=VYw-sVLl&#34; width=&#34;600&#34; height=&#34;183&#34; alt=&#34;Diagram showing the Camel on Quarkus flow from client to SOAP service.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 1: The Camel on Quarkus flow.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Demo highlights&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The big win for you is the chance to play the demo in a free-to-access environment from your browser and view/edit the code, and build, deploy, and test the application. Regarding Camel on Quarkus, the example stands out on various fronts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First of all, both REST and SOAP interfaces are implemented following a contract-first approach. In essence, we rely on the OpenAPI (REST) and WSDL (SOAP) definitions to auto-generate the applicationâs input/output interfaces. Figure 2 shows how a contract-first OpenAPI helps the developer; this is also valid for SOAP.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/camel-quarkus-2.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/camel-quarkus-2.png?itok=6koEsqNz&#34; width=&#34;600&#34; height=&#34;268&#34; alt=&#34;Figure 2: Contract-first development.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 2: Contract-first development.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Another notable feature in the demo is data transformation. JSON input must be mapped to outgoing SOAP during the request flow and perform the reverse operation during the response flow. It is all done in a single transformation stylesheet using XSLTs, as in Figure 3.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/camel-quarkus-3.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/camel-quarkus-3.png?itok=lzp0oY6p&#34; width=&#34;600&#34; height=&#34;192&#34; alt=&#34;Diagram of the JSON / SOAP data mapping flow.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 3: JSON / SOAP data mapping operations.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&#34;align-center&#34;&gt;And finally, included in the code, youâll find a test unit (JUnit) to validate the entire request/response flow (Figure 4). You will discover how to use Camelâs testing framework to dynamically spin up an actual SOAP back end to test against, trigger the processing flow, and tear it all down when done.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/camel-quarkus-4.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/camel-quarkus-4.png?itok=7PtRDI9d&#34; width=&#34;600&#34; height=&#34;277&#34; alt=&#34;The unit testing flow with Camel and JUnit.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 4: Unit testing with Camel.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&#34;align-center&#34;&gt;What is unique about Camel running on Quarkus, but also true for all runtimes, is how little code is required and how elegantly it is laid out. This simplicity guarantees economical, long-term, and sustainable support for your landscape of implemented Camel services.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you would like to see how all of this is done, jump straight into the Developer Sandbox to explore the code and execute it.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Access the Developer Sandbox&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Follow these instructions to get started in the Developer Sandbox: &lt;a href=&#34;https://developers.redhat.com/articles/2023/03/09/how-access-developer-sandbox-red-hat-openshift#&#34; target=&#34;_blank&#34;&gt;How to access the Developer Sandbox for Red Hat OpenShift&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once you have your browser connected to the Developer Sandbox console, youâll be all set to start the articleâs tutorial.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Inside OpenShift Dev Spaces&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The Developer Sandbox ships with an entire web-based IDE called &lt;a href=&#34;https://developers.redhat.com/products/openshift-dev-spaces/overview&#34; target=&#34;_blank&#34;&gt;Red Hat OpenShift Dev Spaces&lt;/a&gt; (formerly Red Hat CodeReady Workspaces).&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Set up your dev environment with the Camel tutorials&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The animated sequence in Figure 5 illustrates the actions to follow to open your development environment along with your tutorial instructions.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content-full-width&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/camel-quarkus-5.gif&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/camel-quarkus-5.gif&#34; width=&#34;839&#34; height=&#34;417&#34; alt=&#34;The steps for setting up your development environment in the OpenShift Dev Spaces user interface.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 5: The OpenShift Dev Spaces UI.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&#34;align-center&#34;&gt;Follow these steps:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&lt;li aria-level=&#34;1&#34;&gt;From the web console, click theÂ &lt;strong&gt;Applications&lt;/strong&gt;Â icon as shown in Figure 5Â (marked 1).&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;SelectÂ &lt;strong&gt;Red Hat OpenShift Dev Spaces&lt;/strong&gt;Â (2). You will be prompted to log in and authorize access; select the &lt;strong&gt;Allow selected permissions&lt;/strong&gt;Â option.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&#xA;&#x9;&lt;p&gt;When the Create Workspace dashboard in OpenShift Dev Spaces opens, copy the snippet below:&lt;/p&gt;&#xA;&#xA;&#x9;&lt;pre&gt;&#xA;&lt;code&gt;https://github.com/RedHat-Middleware-Workshops/devsandbox-camel.git&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#x9;&lt;p&gt;Then, paste it into theÂ &lt;strong&gt;Git Repo URL&lt;/strong&gt;Â field (3).&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;ClickÂ &lt;strong&gt;Create &amp;amp; Open&lt;/strong&gt;Â (4).&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;When the workspace finishes provisioning and the IDE opens, click the deployable Endpoints accordion (5).&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Then, click on the icon (6), which opens the tutorial in a new browser tab.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Choose the tutorial indicated in the next section.&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;h3&gt;Start the Camel Quarkus tutorial&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Select the &lt;strong&gt;Camel Quarkus - Rest/Soap Demo &lt;/strong&gt;tile, highlighted in Figure 6.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;figure class=&#34;align-center rhd-u-has-filter-caption&#34; role=&#34;group&#34;&gt;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/camel-quarkus-soap.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/camel-quarkus-soap.png?itok=pE4rQF5L&#34; width=&#34;600&#34; height=&#34;359&#34; alt=&#34;The Camel Quarkus - Rest/Soap Demo tile highlighted in the Solution Explorer.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;figcaption class=&#34;rhd-c-caption&#34;&gt;Figure 6: Locating the Camel Quarkus tutorial.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;When you click on the tile, the Solution Explorer will show the lab introductions and the exercise chapters included, which you should be able to complete in around 15 minutes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Enjoy the Camel ride!&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;More Apache Camel resources&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;This article ends here, but this should only be the start of your journey with Apache Camel. The Developer Sandbox for Red Hat OpenShift gives you the opportunity to play on a &lt;a href=&#34;https://developers.redhat.com/topics/kubernetes&#34;&gt;Kubernetes&lt;/a&gt;-based application platform with an integrated developer IDE (OpenShift Dev Spaces).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We encourage you to check out the resources below to learn more about Camel and explore different ways to build applications with Apache Camel:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li aria-level=&#34;1&#34;&gt;Play with more &lt;a href=&#34;https://developers.redhat.com/articles/2023/03/09/accelerate-your-cloud-native-learning-access-red-hat-developer-sandbox&#34;&gt;tutorials in the Developer Sandbox for Red Hat OpenShift&lt;/a&gt;.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Learn more about the different Camel runtimes available by reading &lt;a href=&#34;https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1&#34;&gt;Choose the best Camel for your integration ride&lt;/a&gt;.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Read &lt;a href=&#34;https://developers.redhat.com/articles/2021/12/06/boost-apache-camel-performance-quarkus&#34;&gt;Boost Apache Camel performance with Quarkus&lt;/a&gt; for a detailed look at Camel Quarkus.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Visit the &lt;a href=&#34;https://developers.redhat.com/products/integration/overview&#34;&gt;Red Hat Integration&lt;/a&gt; page on developers.redhat.com to see complementary capabilities around Camel.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/06/try-camel-quarkus-developer-sandbox-red-hat-openshift&#34; title=&#34;Try Camel on Quarkus in the Developer Sandbox for Red Hat OpenShift&#34;&gt;Try Camel on Quarkus in the Developer Sandbox for Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>Red Hat Developer: How to migrate server configurations to JBoss EAP 7.4</title>
    <updated>2023-10-05T07:00:00Z</updated>
    <id>16dfcff2-b9bc-4c89-bd37-a38408e792e0</id>
    <link href="https://developers.redhat.com/articles/2023/10/05/how-migrate-server-configurations-jboss-eap-74" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Before migrating your application from &lt;a href=&#34;https://developers.redhat.com/products/eap/overview&#34;&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP) 7.1 to the latest version, 7.4, you&#39;ll first need to consider how to migrate from one server to the other. One aspect that is often overlooked: migrating the server configurations and all the features installed in the current server to the new one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The JBoss Server Migration Tool helps migrate server configuration files (&lt;code&gt;standalone.xml&lt;/code&gt; and &lt;code&gt;domain.xml&lt;/code&gt;) to the new installation. This saves precious time manually testing and migrating the server migrations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;JBoss EAP versions align with the following subsystem versions:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;JBoss EAP 7.4:&lt;/strong&gt; Enterprise Java Beans (EJB) 3.9 (connectors) and modcluster 5.0 (proxy)&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&lt;strong&gt;JBoss EAP 7.3:&lt;/strong&gt; EJB 3.6 (connector-ref) and modcluster 5.0 (proxy)&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&lt;strong&gt;EJBÂ 7.1:&lt;/strong&gt; EJB 3.5 (connector-ref) and modcluster 3.0 (mod-cluster-config)&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;h2&gt;When to use the JBoss Server Migration Tool&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;To migrate the server, use the embedded Server Migration Tool in JBoss EAP 7.4. The&lt;strong&gt; server migration toolkit&lt;/strong&gt; is already embedded inside JBoss EAP and it lets you migrate each subsystem and migrate from one version to another (source to target). By embedded, I mean the server migration toolkit is simply a script (&lt;code&gt;jboss-server-migration.sh/jboss-server-migration.bat&lt;/code&gt;)Â that you can use to migrate JBoss EAP configurations and it is found under &lt;code&gt;JBOSS_HOME/bin (aka EAP_HOME)&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To solve the application migration problem, use Red Hat&#39;s &lt;strong&gt;&lt;a href=&#34;https://developers.redhat.com/products/mtr/overview&#34;&gt;migration toolkit for runtimes&lt;/a&gt;&lt;/strong&gt;. TheÂ &lt;a href=&#34;https://developers.redhat.com/products/mta/overview&#34;&gt;&lt;strong&gt;migration toolkit for applications&lt;/strong&gt;&lt;/a&gt;Â is intended for &lt;a href=&#34;https://developers.redhat.com/products/openshift/overview&#34;&gt;Red Hat OpenShift Container Platform&lt;/a&gt; migrations (cloud-ready applications),Â not for JBoss EAP server application migrations.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Migration output&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;If you experience any problems running the script, you can refer to the &lt;code&gt;$JBOSS_HOME/migration&lt;/code&gt; directory that contains the configuration, logs, and reports.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;$ cd /home/jboss-eap-7.4/migration&#xA;$ ls&#xA;configuration logs README.md reports &lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Each file&#39;s purpose is described below:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Logs:&lt;/strong&gt; The logs show the migration output, which is the same as you will see on the screen.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&lt;strong&gt;Configuration:&lt;/strong&gt; The configuration is the template used on the report. &lt;code&gt;environment.properties&lt;/code&gt; is used for non-interactive mode. &lt;code&gt;logging.properties&lt;/code&gt;Â contains the actual logging properties for the tool.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&lt;strong&gt;Reports:&lt;/strong&gt; The report is generated in HTML/XML, so you can open it in any browser. The report has a simple template with the summary, the environment details, and the successfully executed tasks.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&lt;strong&gt;Results:&lt;/strong&gt; After the migration, you can find the results in the configuration files.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;h2&gt;An interactive migration example&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The following example shows how to migrate from JBoss EAP 7.3 to JBoss EAP 7.4. You can also use these steps to migrate from JBoss EAP 7.2 to JBoss EAP 7.4.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Why is this migration necessary? The EJB subsystem changed specific features (EJB 3.5 to EJB 3.9), and the MicroProfile subsystem was removed. This breaks the forward compatibility, meaning you cannot start JBoss EAP 7.4 with JBoss EAP 7.3 configurations because it will only work if MicroProfile is removed.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Migration steps&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;In this example migration, JBoss EAP 7.4 is the target and JBoss EAP 7.3 is the source. The example uses the interactive mode. If you are not using the interactive mode, the &lt;code&gt;environment.properties&lt;/code&gt; file will come in handy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Follow these steps:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;Download the new version, JBoss EAP 7.4.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Unzip it and set &lt;code&gt;JBOSS_HOME&lt;/code&gt; to JBoss EAP 7.4; this will be your target server.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Go to the source directory (i.e., JBoss EAP 7.3) and set &lt;code&gt;export SOURCE_7_3&lt;/code&gt; for that directory; this will be your source server.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Go to the JBoss EAP 7.4 directory (&lt;code&gt;cd $JBOSS_HOME/bin&lt;/code&gt;) and execute the following script: &lt;code&gt;$./jboss-server-migration.sh --source /SOURCE_7_3&lt;/code&gt;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;This will prompt the standalone migration. Select &lt;strong&gt;yes&lt;/strong&gt; and hit enter.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Later on, select &lt;strong&gt;yes&lt;/strong&gt; to migrate all configuration files. You might already have a deployment on the old JBoss EAP 7.0, so select &lt;strong&gt;no&lt;/strong&gt; here to migrate the deployed application. This will not actually migrate the application, but deploy it in the target. Select &lt;strong&gt;no&lt;/strong&gt; for the mode-domain migration.&#xA;&#x9;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;&#xA;[user@user jboss-eap-7.4]$ ./bin/jboss-server-migration.sh --source /home/jboss-eap-7.3&#xA;=JBoss Server Migration Tool= Retrieving servers...&#xA;15:04:02,128 INFO [logger] SOURCE server name: JBoss EAP, version: 7.3.0.GA. &#xA;15:04:02,136 INFO [logger] TARGET server name: JBoss EAP, version: 7.4.0.GA. &#xA;# Server migration starting... # &#xA;15:04:02,171 INFO [ServerMigrationTask#1:1] --- Migrating modules requested by environment... #&#xA;15:04:02,171 INFO [ServerMigrationTask#1:1] No modules to migrate. # Migrate the source&#39;s standalone server? yes/no? yes # &#xA;15:04:05,001 INFO [ServerMigrationTask#1:2] &#xA;--- Migrating standalone server... &#xA;# # Migrate all configurations? yes/no? no&#xA;Migrate configuration standalone-cameleon.xml ? yes/no? no &#xA;... Migrate configuration standalone_example.xml ? &lt;----------------------- your yes/no? yes &#xA;# ... Migration Result: SUCCESS &lt;---- success ... &lt;/code&gt;&lt;/pre&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Wait for the migration to complete.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Review the migration output/log. The result file can be found in &lt;code&gt;$JBOSS_HOME/standalone/configuration/standalone_example.xml.beforeMigration | standalone_example.xml&lt;/code&gt;.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;After finishing the process, go to the new JBoss EAP directory and start the instance.&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;h3&gt;Domain mode migration&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The following refers to the domain mode migration:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[user@user jboss-eap-7.4]$ cp /home/jboss-eap-7.3/domain/configuration/domain.xml /home/jboss-eap-7.3/domain/configuration/domain_cu.xml&#xA;[user@user jboss-eap-7.4]$ clear [user@user jboss-eap-7.4]$ ./bin/jboss-server-migration.sh --source /home/jboss-eap-7.3&#xA;---------------------------------------------------------- ---- JBoss Server Migration Tool ----------------------- ---------------------------------------------------------- Retrieving servers...&#xA;22:27:38,426 INFO [logger] SOURCE server name: JBoss EAP, version: 7.3.0.GA.&#xA;22:27:38,434 INFO [logger] TARGET server name: JBoss EAP, version: 7.4.0.GA. ----------------------------------------------------------&#xA;---------------------------------------------------------- Server migration starting...&#xA;22:27:38,473 INFO [ServerMigrationTask#1:1] --- Migrating modules requested by environment...&#xA;22:27:38,473 INFO [ServerMigrationTask#1:1] No modules to migrate.&#xA;Migrate the source&#39;s standalone server? yes/no? no&#xA;Migrate the source&#39;s managed domain? yes/no? yes&#xA;22:27:40,904 INFO [ServerMigrationTask#1:3] --- Migrating managed domain...&#xA;22:27:40,933 INFO [ServerMigrationTask#1:3:3] Source&#39;s domain configurations found: [domain.xml, domain_cu.xml] Migrate all configurations? yes/no? no&#xA;Migrate configuration domain.xml ? yes/no? no Migrate configuration domain_cu.xml ? yes/no? yes&#xA;22:27:44,967 INFO [ServerMigrationTask#1:3:3:1] Migrating domain configuration domain_cu.xml...&#xA;22:27:45,300 INFO [ServerMigrationTask#1:3:3:1:1] Unsupported extensions removed: [org.wildfly.extension.microprofile.opentracing-smallrye, org.wildfly.extension.microprofile.config-smallrye]&#xA;22:27:45,555 INFO [ServerMigrationTask#1:3:3:1:2] Unsupported subsystems removed: [urn:wildfly:microprofile-opentracing-smallrye:1.0, urn:wildfly:microprofile-config-smallrye:1.0] 22:27:46,201 INFO [security] ELY00001: WildFly Elytron version 1.15.3.Final-redhat-00001&#xA;22:27:48,362 INFO [ServerMigrationTask#1:3:3:1:5] Host-excludes configuration added.&#xA;22:27:48,493 INFO [ServerMigrationTask#1:3:4] Source&#39;s host configurations found: [host-master.xml, host-slave.xml, host.xml] Migrate all configurations? yes/no? no&#xA;Migrate configuration host-master.xml ? yes/no? no&#xA;Migrate configuration host-slave.xml ? yes/no? no Migrate configuration host.xml ? yes/no? no Server migration done. 22:27:52,744 INFO [logger] --------------------------------------------------------- Task Summary --------------------------------------------------------- server ......................................... SUCCESS domain ........................................ SUCCESS domain-configurations ........................ SUCCESS domain-configuration(source=domain_cu.xml) .. SUCCESS --------------------------------------------------------- Migration Result: SUCCESS --------------------------------------------------------- &lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;A non-interactive migration example&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;For non-interactive migration, enter &lt;code&gt;--interactive=false&lt;/code&gt;, setting the properties correctly on the file as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;[user@user jboss-eap-7.4]$ ./bin/jboss-server-migration.sh --source /home/jboss-eap-7.3 --interactive=false&#xA;---------------------------------------------------------- ---- JBoss Server Migration Tool ----------------------- ---------------------------------------------------------- Retrieving servers...&#xA;22:30:27,884 INFO [logger] SOURCE server name: JBoss EAP, version: 7.3.0.GA.&#xA;22:30:27,891 INFO [logger] TARGET server name: JBoss EAP, version: 7.4.0.GA. ---------------------------------------------------------- ---------------------------------------------------------- Server migration starting...&#xA;22:30:27,926 INFO [ServerMigrationTask#1:1] --- Migrating modules requested by environment...&#xA;22:30:27,926 INFO [ServerMigrationTask#1:1] No modules to migrate. &#xA;22:30:27,927 INFO [ServerMigrationTask#1:2] --- Migrating standalone server...&#xA;22:30:27,953 INFO [ServerMigrationTask#1:2:2] Source&#39;s standalone content migrated. &#xA;22:30:27,963 INFO [ServerMigrationTask#1:2:3] Source&#39;s standalone configurations found: [standalone-cameleon.xml, standalone-full-ha.xml, standalone-full.xml, standalone-ha-cu.xml, standalone-ha.xml, standalone-load-balancer.xml, standalone.xml, standalone_cu.xml] &#xA;22:30:27,965 INFO [ServerMigrationTask#1:2:3:1] Migrating standalone configuration standalone-cameleon.xml... &#xA;22:30:29,004 INFO [security] ELY00001: WildFly Elytron version 1.15.3.Final-redhat-00001 22:30:29,740 INFO [ServerMigrationTask#1:2:3:1:5] Subsystem health added. &#xA;22:30:29,775 INFO [ServerMigrationTask#1:2:3:1:6] Subsystem metrics added. &#xA;22:30:29,787 INFO [ServerMigrationTask#1:2:3:1:7] Security realms migrated. &#xA;22:30:29,796 INFO [ServerMigrationTask#1:2:3:1:8:2] Non-persistent deployments found in /home/jboss-eap-7.3/standalone/deployments: [security-test.war, jsp_cdi_servlet.war, EjbSecure.jar, jaxrs-client-sources.jar, testservlet.war, EjbPrint.jar, HelloServlet.war, jaxrs-client.war] &#xA;22:30:29,833 INFO [ServerMigrationTask#1:2:3:2] Migrating standalone configuration standalone-full-ha.xml... &#xA;22:30:29,919 INFO [ServerMigrationTask#1:2:3:2:1] Unsupported extensions removed: [org.wildfly.extension.microprofile.health-smallrye, org.wildfly.extension.microprofile.metrics-smallrye, org.wildfly.extension.microprofile.opentracing-smallrye, org.wildfly.extension.microprofile.config-smallrye] &#xA;22:30:29,996 INFO [ServerMigrationTask#1:2:3:2:2] Unsupported subsystems removed: [urn:wildfly:microprofile-opentracing-smallrye:1.0, urn:wildfly:microprofile-health-smallrye:2.0, urn:wildfly:microprofile-metrics-smallrye:2.0, urn:wildfly:microprofile-config-smallrye:1.0] 22:30:30,515 INFO [ServerMigrationTask#1:2:3:2:5] Subsystem health added. 22:30:30,549 INFO [ServerMigrationTask#1:2:3:2:6] Subsystem metrics added. 22:30:30,558 INFO [ServerMigrationTask#1:2:3:2:7] Security realms migrated. 22:30:30,597 INFO [ServerMigrationTask#1:2:3:3] Migrating standalone configuration standalone-full.xml... &#xA;22:30:30,673 INFO [ServerMigrationTask#1:2:3:3:1] Unsupported extensions removed: [org.wildfly.extension.microprofile.health-smallrye, org.wildfly.extension.microprofile.metrics-smallrye, org.wildfly.extension.microprofile.opentracing-smallrye, org.wildfly.extension.microprofile.config-smallrye] &#xA;22:30:30,751 INFO [ServerMigrationTask#1:2:3:3:2] Unsupported subsystems removed: [urn:wildfly:microprofile-opentracing-smallrye:1.0, urn:wildfly:microprofile-health-smallrye:2.0, urn:wildfly:microprofile-metrics-smallrye:2.0, urn:wildfly:microprofile-config-smallrye:1.0] &#xA;22:30:30,923 INFO [ServerMigrationTask#1:2:3:3:5] Subsystem health added.&#xA;22:30:30,960 INFO [ServerMigrationTask#1:2:3:3:6] Subsystem metrics added.&#xA;22:30:30,970 INFO [ServerMigrationTask#1:2:3:3:7] Security realms migrated. &#xA;22:30:31,002 INFO [ServerMigrationTask#1:2:3:4] Migrating standalone configuration standalone-ha-cu.xml... &#xA;22:30:31,088 INFO [ServerMigrationTask#1:2:3:4:1] Unsupported extensions removed: [org.wildfly.extension.microprofile.health-smallrye, org.wildfly.extension.microprofile.metrics-smallrye, org.wildfly.extension.microprofile.opentracing-smallrye, org.wildfly.extension.microprofile.config-smallrye] 22:30:31,169 INFO [ServerMigrationTask#1:2:3:4:2] Unsupported subsystems removed: [urn:wildfly:microprofile-opentracing-smallrye:1.0, urn:wildfly:microprofile-health-smallrye:2.0, urn:wildfly:microprofile-metrics-smallrye:2.0, urn:wildfly:microprofile-config-smallrye:1.0] 22:30:31,192 ERROR [logger] Migration failed: org.jboss.migration.core.ServerMigrationFailureException: java.lang.IllegalStateException: Migration of module com.oracle:main required, but module not found in source server. at org.jboss.migration.wfly10.config.task.module.ConfigurationModulesMigrationTaskFactory$Task.migrateModules(ConfigurationModulesMigrationTaskFactory.java:90) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.jboss.ModulesMigrationTask.run(ModulesMigrationTask.java:67) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.env.SkippableByEnvServerMigrationTask.run(SkippableByEnvServerMigrationTask.java:47) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.run(TaskExecutionImpl.java:169) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.execute(TaskExecutionImpl.java:159) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskContextImpl.execute(TaskContextImpl.java:68) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskContextImpl.execute(TaskContextImpl.java:32) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.ServerConfigurationMigration$1.run(ServerConfigurationMigration.java:88) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.run(TaskExecutionImpl.java:169) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.execute(TaskExecutionImpl.java:159) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskContextImpl.execute(TaskContextImpl.java:68) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskContextImpl.execute(TaskContextImpl.java:32) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.ServerConfigurationsMigration$Task.migrateConfig(ServerConfigurationsMigration.java:151) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.ServerConfigurationsMigration$Task.migrateAllConfigs(ServerConfigurationsMigration.java:120) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.ServerConfigurationsMigration$Task.run(ServerConfigurationsMigration.java:113) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.run(TaskExecutionImpl.java:169) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.execute(TaskExecutionImpl.java:159) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskContextImpl.execute(TaskContextImpl.java:68) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskContextImpl.execute(TaskContextImpl.java:32) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.StandaloneServerMigration$1.run(StandaloneServerMigration.java:61) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.console.UserConfirmationServerMigrationTask.runTask(UserConfirmationServerMigrationTask.java:58) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.console.UserConfirmationServerMigrationTask.run(UserConfirmationServerMigrationTask.java:63) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.env.SkippableByEnvServerMigrationTask.run(SkippableByEnvServerMigrationTask.java:47) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.run(TaskExecutionImpl.java:169) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.execute(TaskExecutionImpl.java:159) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskContextImpl.execute(TaskContextImpl.java:68) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskContextImpl.execute(TaskContextImpl.java:32) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.ServerMigration.run(ServerMigration.java:45) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.WildFlyServer10.migrate(WildFlyServer10.java:40) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.ServerMigration$1.run(ServerMigration.java:153) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.task.TaskExecutionImpl.run(TaskExecutionImpl.java:169) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.ServerMigration.run(ServerMigration.java:160) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at&#xA;org.jboss.migration.cli.CommandLineServerMigration.main(CommandLineServerMigration.java:131) [jboss-server-migration-cli-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at&#xA;org.jboss.modules.Module.run(Module.java:353) [jboss-modules.jar:1.11.0.Final-redhat-00001] at org.jboss.modules.Module.run(Module.java:321) [jboss-modules.jar:1.11.0.Final-redhat-00001] at org.jboss.modules.Main.main(Main.java:617) [jboss-modules.jar:1.11.0.Final-redhat-00001] Caused by: java.lang.IllegalStateException: Migration of module com.oracle:main required, but module not found in source server. at org.jboss.migration.core.jboss.ModulesMigrationTask$ModuleMigrator.migrateModule(ModulesMigrationTask.java:128) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.core.jboss.ModulesMigrationTask$ModuleMigrator.migrateModule(ModulesMigrationTask.java:118) [jboss-server-migration-core-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.module.DatasourcesJdbcDriversModulesFinder.processElement(DatasourcesJdbcDriversModulesFinder.java:44) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.module.ConfigurationModulesMigrationTaskFactory$Task.processElement(ConfigurationModulesMigrationTaskFactory.java:101) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] at org.jboss.migration.wfly10.config.task.module.ConfigurationModulesMigrationTaskFactory$Task.migrateModules(ConfigurationModulesMigrationTaskFactory.java:86) [jboss-server-migration-wildfly10.0-1.10.0.Final-redhat-00007.jar:1.10.0.Final-redhat-00007] ... 35 more &#xA;22:30:31,196 INFO [logger] ---------------------------------------------------------------------------------------------------------- Task Summary ---------------------------------------------------------------------------------------------------------- server .......................................................................................... FAIL standalone ..................................................................................... FAIL contents.standalone.migrate-content-dir ....................................................... SUCCESS contents.standalone.migrate-content(path=fd/99b2631295d816547650c92b61498cf687bae4/content) .. SUCCESS contents.standalone.migrate-content(path=e4/fc7714c5b1a309a87dbb074a3d7b88fd339d18/content) .. SUCCESS contents.standalone.migrate-content(path=30/9de064883cdf625c997beb8323b5b80dc154bf/content) .. SUCCESS contents.standalone.migrate-content(path=f6/633900183b2cd81cf7d5f7a4d7bbdde96734b9/content) .. SUCCESS contents.standalone.migrate-content(path=5e/bd422eabb65d1f6a56a563294e80d6cf45b1a1/content) .. SUCCESS contents.standalone.migrate-content(path=9b/336f2be3de943dea660245aea239b4791cc48c/content) .. SUCCESS contents.standalone.migrate-content(path=0a/ed60bd9874dee796c3652f117167a51959d0d7/content) .. SUCCESS standalone-configurations ..................................................................... FAIL standalone-configuration(source=standalone-cameleon.xml) ..................................... SUCCESS standalone-configuration(source=standalone-full-ha.xml) ...................................... SUCCESS standalone-configuration(source=standalone-full.xml) ......................................... SUCCESS standalone-configuration(source=standalone-ha-cu.xml) ........................................ FAIL ---------------------------------------------------------------------------------------------------------- Migration Result: FAIL ----------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Tips for migrating files&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Tip #1:&lt;/strong&gt; Don&#39;t try to migrate a broken file, a file with unparsable content, or files cut in the middle; the parsing process needs to work for the migration to be successful. After the migration, the migration tool will spawn an embedded server and run it to test. Depending on the error, it might generate a partially migrated file, which will not work. The file will have the configuration resulting from the migration.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Do not leave the migrated file with the standard names, such as &lt;code&gt;standalone.xml&lt;/code&gt; or &lt;code&gt;domain.xml&lt;/code&gt;; doing so will overwrite the original files. In this case, use a different name for the migration.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Tip #2:&lt;/strong&gt; After the migration, do a thorough review and test with the resulting configuration to verify it has a similar (expected) behavior.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Migrate the data source&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;You will need to migrate the data source, depending on the installation. Bear in mind that Red Hat recommends installing a JDBC driver as a core module instead of directly deploying a driver jar file through the management console. Follow the instructions in the article &lt;a href=&#34;https://access.redhat.com/solutions/662223&#34;&gt;What is the recommended way to install a JDBC driver in EAP 6/7?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Migrating custom scripts&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Custom scripts will not be migrated; they are basically ignored by the Server Migration Tool, which can only be addressed after the migration. You will need to migrate the custom scripts manually (copy them) and then do the respective due diligence to ensure they still work.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Migrating JBoss EAP XP to JBoss EAP&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;It is not possible to directly migrate from JBoss EAP XP to JBoss EAP because they are different products; if you were to migrate anything to JBoss XP, it would have to be from an XP installation. So, we will follow the steps for XP installation and then migrate from XP to another XP.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, you will encounter the following issue:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;22:04:05,439 ERROR [logger] Migration failed:&#xA;org.jboss.migration.core.ServerMigrationFailureException: java.lang.IllegalArgumentException: WFCMTOOL000004: Server name = JBoss EAP XP, version = 7.4.1.GA does not support migration from server name = JBoss EAP, version = 7.3.0.GA. at org.jboss.migration.core.task.TaskExecutionImpl.run(TaskExecutionImpl.java:174) [jboss-s ...&#xA;Caused by: java.lang.IllegalArgumentException: WFCMTOOL000004: Server name = JBoss EAP XP, version = 7.4.1.GA does not support migration from server name = JBoss EAP, version = 7.3.0.GA. &lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Troubleshooting the Server Migration Tool&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Basically, the migration logs will be transparent, which is very helpful for diagnosing specific issues. One of the most common problems is migrating a version that is not supported, such as migrating JBoss EAP 7.0 to JBoss EAP 7.3 (only JBoss EAP 7.2). If in doubt, you can set the &lt;code&gt;logger.level&lt;/code&gt; (found in &lt;code&gt;logging.properties&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, JBoss EAP 7.4 lets you migrate straight from JBoss EAP 7.1 and JBoss EAP 7.2. This avoids chain scenarios needing subsequent migrations (e.g., JBoss EAP 7.1 to JBoss EAP 7.2 to JBoss EAP 7.3 to JBoss EAP 7.4), which we encountered before this tech preview came along.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;FAQ&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Q. Is it possible to keep two JBoss EAP installations at the same time, the new and the old?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A. Yes, as long as the installation was done using ZIP. RPM installations do not allow multiple JBoss EAP installations. For running two EAP servers &lt;strong&gt;simultaneously&lt;/strong&gt; verify if they won&#39;t have port conflicts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Q. Can I run the migration from JBoss EAP 7.2 to JBoss EAP 7.4?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A. Yes, this is available as a feature in JBoss EAP 7.4.2+.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Q. Does the migration tool help migrate deployments?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A. No, the JBoss Server Migration Too&lt;strong&gt;l does not&lt;/strong&gt; migrate the deployment code; it migrates the deployment in that it copies the deployment from source to target. To migrate the deployment code itself, you must use the migration toolkit for runtimes (or the migration toolkit for applications, for OpenShift Container Platform migrations).Â &lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Additional resources&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;To learn more, refer to the JBoss Server Migration ToolÂ migration guide in &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/pdf/using_the_jboss_server_migration_tool/red_hat_jboss_enterprise_application_platform-7.4-using_the_jboss_server_migration_tool-en-us.pdf&#34;&gt;PDF&lt;/a&gt; or &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/using_the_jboss_server_migration_tool/index#about_the_server_migration_tool&#34;&gt;HTML&lt;/a&gt;Â formats. Red Hat Support team created the articleÂ &lt;a href=&#34;https://access.redhat.com/solutions/4962481&#34;&gt;Using JBoss Server Migration Tool to upgrade from JBoss EAP 7.x to 7.current&lt;/a&gt;Â with several issues and an simple example as I above explain.Â &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Regarding JBoss EAP 7.3 breaking JBoss EAP 7.4, refer to the solution described in &lt;a href=&#34;https://access.redhat.com/solutions/6315691&#34;&gt;Using EAP 7.3 configuration in EAP 7.4 breaks the backward compatibility&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For any other specific inquiries, please&lt;strong&gt; &lt;/strong&gt;open a case with Red Hat support. Our global team of experts can help you with any issues.&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/05/how-migrate-server-configurations-jboss-eap-74&#34; title=&#34;How to migrate server configurations to JBoss EAP 7.4&#34;&gt;How to migrate server configurations to JBoss EAP 7.4&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>Quarkus: Quarkus 3.4.2 released - Maintenance release</title>
    <updated>2023-10-05T00:00:00Z</updated>
    <id>https://quarkus.io/blog/quarkus-3-4-2-released/</id>
    <link href="https://quarkus.io/blog/quarkus-3-4-2-released/" rel="alternate"></link>
    <summary type="html">Today, we released Quarkus 3.4.2, our first maintenance release for our 3.4 release train (we skipped 3.4.0). It includes a bunch of bugfixes, together with documentation improvements. Update To update to Quarkus 3.4.2, we recommend updating to the latest version of the Quarkus CLI and run: quarkus update To migrate...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Quarkus 3.4.2 released - Maintenance release</title>
    <updated>2023-10-05T00:00:00Z</updated>
    <id>https://quarkus.io/blog/quarkus-3-4-2-released/</id>
    <link href="https://quarkus.io/blog/quarkus-3-4-2-released/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Red Hat Developer: About Argo CD ApplicationSet and SCM Provider generator</title>
    <updated>2023-10-04T07:00:00Z</updated>
    <id>eb3cab1e-7d1d-407e-815c-071817e984fe</id>
    <link href="https://developers.redhat.com/articles/2023/10/04/about-argo-cd-applicationset-and-scm-provider-generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ApplicationSet controller is a part of Argo CD that adds support for anÂ &lt;code&gt;ApplicationSet&lt;/code&gt; CustomResourceDefinition (CRD). TheÂ ApplicationSet controller helps to add &lt;code&gt;Application&lt;/code&gt; automation and improve multicluster support and cluster multitenant support within Argo CD.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;ApplicationSet&lt;/code&gt; provides the following benefits:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li aria-level=&#34;1&#34;&gt;The ability to use a single &lt;a href=&#34;https://developers.redhat.com/topics/kubernetes&#34;&gt;Kubernetes&lt;/a&gt; manifest to target multiple Kubernetes clustersÂ and deploy multiple applications from one or multiple Git repositories with Argo CD.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Improved support for monorepos.Â In the context of Argo CD, a monorepo is multiple Argo CD &lt;code&gt;Application&lt;/code&gt; resources defined within a single Git repository.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;Within multitenant clusters, improves the ability of individual cluster tenants to deploy applications using Argo CD (without needing to involve privileged cluster administrators in enabling the destination clusters/namespaces).&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;You can view all the supported fields for &lt;code&gt;ApplicationSet&lt;/code&gt; in theÂ &lt;a href=&#34;https://argo-cd.readthedocs.io/en/release-2.8/operator-manual/applicationset/applicationset-specification/&#34;&gt;Argo CD documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;ApplicationSet generators&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Generators generate parameters and are rendered into the &lt;code&gt;template&lt;/code&gt; field of the &lt;code&gt;ApplicationSet&lt;/code&gt; resource. &lt;code&gt;ApplicationSet&lt;/code&gt; supports a variety of generators, as described below:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;List generator:Â &lt;/strong&gt;Generates parameters based on an arbitrary list of key/value pairs.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;Cluster generator:&lt;/strong&gt; Allows you to target Argo CD applications to clusters based on the list of clusters defined within (and managed by) Argo CD.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;Git generator:&lt;/strong&gt; Allows you to create applications based on files within a Git repository or based on the directory structure of a Git repository.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;Matrix generator:&lt;/strong&gt; Can be used to combine the generated parameters of two separate generators.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;Merge generator:&lt;/strong&gt; Can be used to merge the generated parameters of two or more generators.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;SCM Provider generator:&lt;/strong&gt; Uses the API of aÂ source code management (SCM) provider (e.g., GitHub) to discover repositories within an organization automatically.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;Pull Request generator:&lt;/strong&gt; Uses the API of a Source-Code-Management-as-a-Service (SCMaaS) provider (e.g., GitHub) to discover open pull requests within a repository automatically.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;Cluster Decision Resource generator:&lt;/strong&gt; Used to interface with Kubernetes custom resources that use custom resource-specific logic to decide which set of Argo CD clusters to deploy to.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;strong&gt;Plug-in generator:&lt;/strong&gt; Makes RPC HTTP requests to provide parameters.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;This article focuses exclusively on the SCM Provider generator and its use cases.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Source code management&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;SCM is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with version control.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As software projects grow in lines of code and contributor headcount, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;SCM Provider generator&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The SCM Provider generator uses the API of a SCMaaS provider such as GitHub to discover repositories within an organization automatically. This fits well with GitOps layout patterns that split microservices across many repositories.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As of Argo CD version 2.8, the supported SCM providers are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;GitHub&lt;/li&gt;&#xA;&#x9;&lt;li&gt;GitLabÂ &lt;/li&gt;&#xA;&#x9;&lt;li&gt;Gitea&lt;/li&gt;&#xA;&#x9;&lt;li&gt;BitbucketÂ &lt;/li&gt;&#xA;&#x9;&lt;li&gt;Azure DevOps&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Bitbucket Cloud&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;You can configure the ApplicationSetÂ with SCM Provider as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: argoproj.io/v1alpha1&#xA;kind: ApplicationSet&#xA;metadata:&#xA;Â  name: myapps&#xA;spec:&#xA;Â  generators:&#xA;Â  - scmProvider:&#xA;Â  Â  Â  # Which protocol to clone using.&#xA;Â  Â  Â  cloneProtocol: ssh&#xA;Â  Â  Â  # See below for provider specific options.&#xA;Â  Â  Â  github:&#xA;Â  Â  Â  Â  # ...&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;cloneProtocol&lt;/code&gt;: defines the protocol to use for the SCM URL. The default is provider-specific, but ssh if possible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The provider&#39;s parameters are described in the &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/&#34;&gt;Argo CD documentation&lt;/a&gt;. We will use GitHub for the example in this article.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;GitHub&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The GitHub mode uses the GitHub API to scan an organization in either github.com or GitHub Enterprise:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: argoproj.io/v1alpha1&#xA;kind: ApplicationSet&#xA;metadata:&#xA;Â  name: guestbook&#xA;spec:&#xA;Â  generators:&#xA;Â  - scmProvider:&#xA;Â  Â  Â  github:&#xA;Â  Â  Â  Â  organization: argoproj&#xA;Â  Â  Â  cloneProtocol: https&#xA;Â  Â  Â  filters:&#xA;Â  Â  Â  - repositoryMatch: example-apps&#xA;Â  template:&#xA;Â  Â  metadata:&#xA;Â  Â  Â  name: &#39;{{ repository }}-guestbook&#39;&#xA;Â  Â  spec:&#xA;Â  Â  Â  project: &#34;default&#34;&#xA;Â  Â  Â  source:&#xA;Â  Â  Â  Â  repoURL: &#39;{{ url }}&#39;&#xA;Â  Â  Â  Â  targetRevision: &#39;{{ branch }}&#39;&#xA;Â  Â  Â  Â  path: guestbook&#xA;Â  Â  Â  destination:&#xA;Â  Â  Â  Â  server: https://kubernetes.default.svc&#xA;Â  Â  Â  Â  namespace: guestbook&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The parameters are explained below:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Organization&lt;/strong&gt;: In the example above, we used &lt;code&gt;argoproj&lt;/code&gt;. If you have multiple organizations, use multiple generators.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&lt;strong&gt;api&lt;/strong&gt;: This field is optional; however, if you are using GitHub Enterprise, you will need to specify the URL to access the API. In our example, we are not using GitHub Enterprise.&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&lt;strong&gt;filters: &lt;/strong&gt;SCM Provider supports multiple filters. We are using a &lt;code&gt;repositoryMatch&lt;/code&gt; filter matching the repository with name &lt;code&gt;example-apps&lt;/code&gt;. You can find more filtersÂ in the &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/#filters&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;h2&gt;Use case&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;There is an e-commerce website with multiple services for orders, inventory, payments, etc.; each service is stored in a separate Git repository within the same organization. When we deploy the e-commerce website, we want all the services to be deployed simultaneously for the website to start successfully.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this case, we can use the SCM Provider generator to generate all the services belonging to the same organization. You can configure the &lt;code&gt;ApplicationSet&lt;/code&gt; in the following format:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: argoproj.io/v1alpha1&#xA;kind: ApplicationSet&#xA;metadata:&#xA;Â  name: ecommerce-website&#xA;spec:&#xA;Â  generators:&#xA;Â  - scmProvider:&#xA;Â  Â  Â  github:&#xA;Â  Â  Â  Â  organization: ecommerceWebsite&#xA;Â  Â  Â  cloneProtocol: https&#xA;Â  template:&#xA;Â  Â  metadata:&#xA;Â  Â  Â  name: &#39;{{ repository }}&#39;&#xA;Â  Â  spec:&#xA;Â  Â  Â  project: &#34;default&#34;&#xA;Â  Â  Â  source:&#xA;Â  Â  Â  Â  repoURL: &#39;{{ url }}&#39;&#xA;Â  Â  Â  Â  targetRevision: &#39;{{ branch }}&#39;&#xA;Â  Â  Â  Â  path: app&#xA;Â  Â  Â  destination:&#xA;Â  Â  Â  Â  server: https://kubernetes.default.svc&#xA;Â  Â  Â  Â  namespace: ecomm&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The ApplicationSet aboveÂ will read all the repositories in the GitHub organization &lt;strong&gt;ecommerceWebsite&lt;/strong&gt; and deploy all the services in the repositories within the path &lt;code&gt;app&lt;/code&gt; in each repository.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Pros&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Deploying multiple applications and services in the same organization is easy and quick. You can use the SCM Provider generator to allow you to dynamically generate ephemeral environments for testing or prod-like environments easily.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Cons&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Once the entire organization is added to the SCM Provider generator, it will pick all the repositories matching the added filtering conditions. If you want to create a new repository within the same organization and do not want it to be deployed, you would need to ensure that the repository does not match any of the filtering conditions added to the SCM Provider generator. This becomes an additional effort if the SCM generator is not configured properly.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;ApplicationSet&lt;/code&gt; custom resource helps you easily and quickly manage multitenant or cluster application deployment. The SCM Provider generator is helpful when you want to manage all repositories of a known pattern within an organization and deploy resources to Argo CD by automatically identifying changes to any of the repositories in the organization.&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/04/about-argo-cd-applicationset-and-scm-provider-generator&#34; title=&#34;About Argo CD ApplicationSet and SCM Provider generator&#34;&gt;About Argo CD ApplicationSet and SCM Provider generator&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>Red Hat Developer: 5 steps to build a self-healing server with Alertmanager</title>
    <updated>2023-10-04T07:00:00Z</updated>
    <id>ed9796c0-ae2f-4035-8f79-cd80e60a3cc1</id>
    <link href="https://developers.redhat.com/articles/2023/10/04/5-steps-build-self-healing-server-alertmanager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In today&#39;s fast-paced world, server downtime can have severe consequences for businesses. Ensuring high availability and rapid recovery is essential for maintaining uninterrupted services. In this article, we will explore how to create a self-healing server using the &lt;a href=&#34;https://developers.redhat.com/topics/event-driven/&#34;&gt;event-driven&lt;/a&gt; architecture ofÂ &lt;a href=&#34;https://developers.redhat.com/products/ansible/overview&#34;&gt;Red Hat Ansible Automation Platform&lt;/a&gt; and integrate it with Alertmanager for efficient monitoring and alerting.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&lt;li aria-level=&#34;1&#34;&gt;Install Ansible Automation Platform and Ansible Rulebook.&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;&lt;a href=&#34;https://developers.redhat.com/topics/containers&#34;&gt;Podman&lt;/a&gt; andÂ &lt;a href=&#34;https://github.com/containers/podman-compose&#34;&gt;podman-compose&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&lt;li aria-level=&#34;1&#34;&gt;These ports mustÂ be opened on the server side: 5000, 9090, 9093,Â 22.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;h2&gt;The concepts of event driven and self healing&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The event-driven architecture of Ansible Automation Platform enables servers to respond to events and take predefined actions automatically. It utilizes event-driven &lt;a href=&#34;https://developers.redhat.com/topics/automation&#34;&gt;automation&lt;/a&gt; and monitoring to detect and remediate issues in real time, leading to a self-healing infrastructure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To learn more about the concept of Event-Driven Ansible, please read my previous &lt;a href=&#34;https://developers.redhat.com/articles/2023/03/09/event-driven-ansible-rulebook-automation&#34;&gt;article&lt;/a&gt;. You can pull the code from our &lt;a href=&#34;https://github.com/redhat-developer-demos/Ansible-use-cases/tree/main/self-healing-server-using-EDA&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;1. Install Prometheus and Alertmanager&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Launching the containers with podman-compose will enable us to install prometheus and Alertmanager, using the following &lt;code&gt;podman-compose.yaml&lt;/code&gt; file.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;&#xA;&#xA;services:&#xA;Â  prometheus:&#xA;Â  Â  image: prom/prometheus:v2.30.3&#xA;Â  Â  ports:&#xA;Â  Â  Â  - 9090:9090&#xA;Â  Â  volumes:&#xA;Â  Â  Â  -./prometheus:/etc/prometheus&#xA;Â  Â  Â  - prometheus-data:/prometheus&#xA;Â  Â  command: --web.enable-lifecycleÂ  --config.file=/etc/prometheus/prometheus.yml&#xA;&#xA;Â  alertmanager:&#xA;Â  Â  image: prom/alertmanager:v0.23.0&#xA;Â  Â  restart: unless-stopped&#xA;Â  Â  ports:&#xA;Â  Â  Â  - &#34;9093:9093&#34;&#xA;Â  Â  volumes:&#xA;Â  Â  Â  - &#34;./alertmanager:/config&#34;&#xA;Â  Â  Â  - alertmanager-data:/data&#xA;Â  Â  command: --config.file=/config/alertmanager.yml --log.level=debug&#xA;&#xA;volumes:&#xA;Â  alertmanager-data:&#xA;&#xA;Â  prometheus-data:&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The Alertmanager for Event-Driven Ansible should be configured in the receiver section, as shown in the &lt;code&gt;alertmanager.yml&lt;/code&gt; file. Include the IP address of the server from which the rulebook is triggered in the webhook section. For instance, if you are running rulebooks on your local machine, the time IP should be &lt;code&gt;http://192.168.1.65:5000/alerts,&lt;/code&gt; or if you have a remote server, then add the public IP of that server &lt;code&gt;http:// 123.345.9.56:5000/alerts&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;alertmanager.yml&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-yaml&#34;&gt;route:&#xA;Â  group_by: [ alertname ]&#xA;Â  receiver: &#39;EDA&#39; # default receiver&#xA;Â  repeat_interval: 24h&#xA;Â  routes:&#xA;&#xA;receivers:&#xA;Â  - name: &#39;EDA&#39;&#xA;Â  Â  webhook_configs:&#xA;Â  Â  Â  - url: &#39;http://172.123.170.87:5000/alerts&#39;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To launch the file, use the following command:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;podman-compose up -d&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Check that Alertmanager and Prometheus are running:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;podman ps&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;CONTAINER ID Â  IMAGE Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  COMMANDÂ  Â  Â  Â  Â  Â  Â  Â  Â  CREATEDÂ  Â  Â  Â  Â  STATUSÂ  Â  Â  Â  Â  PORTS Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  NAMES&#xA;254000d2a108 Â  prom/alertmanager:v0.23.0 Â  &#34;/bin/alertmanager -...&#34; Â  15 seconds ago Â  Up 13 seconds Â  0.0.0.0:9093-&gt;9093/tcp, :::9093-&gt;9093/tcp Â  self-healing-server_alertmanager_1&#xA;277f1c6da0cd Â  prom/prometheus:v2.30.3 Â  Â  &#34;/bin/prometheus --w...&#34; Â  15 seconds ago Â  Up 14 seconds Â  0.0.0.0:9090-&gt;9090/tcp, :::9090-&gt;9090/tcp Â  self-healing-server_prometheus_1&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Search for theÂ &lt;code&gt;http://192.168.1.22:9090 &lt;/code&gt;site and check that prometheus is up and running. After accessing Prometheus, check out the Alertmanager dashboard:Â &lt;code&gt;http://192.168.1.22:9093&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2. Write the rulebook&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The basic principle of any rulebook is source - rule - action. So the following rulebook also contains the same conditions. For a self-healing use case, we will use rules with conditions to trigger rulebooks for specific conditions.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;- name: Automatic Remediation of a webserver&#xA;Â  hosts: localhost&#xA;Â  sources:&#xA;Â  Â  - name: listen for alerts&#xA;Â  Â  Â  ansible.eda.alertmanager:&#xA;Â  Â  Â  Â  host: 0.0.0.0&#xA;Â  Â  Â  Â  port: 5000&#xA;Â  rules:&#xA;Â  Â  - name: server down&#xA;Â  Â  Â  condition: event.alert.labels.job == &#34;server&#34; and event.alert.status == &#34;firing&#34;&#xA;Â  Â  Â  action:&#xA;Â  Â  Â  Â  run_playbook:&#xA;Â  Â  Â  Â  Â  name: remediation-playbooks/server-playbook.yml&#xA;&#xA;Â  Â  - name: Storage full on server&#xA;Â  Â  Â  condition: event.alert.labels.job == &#34;storage&#34; and event.alert.status == &#34;firing&#34;&#xA;Â  Â  Â  action:&#xA;Â  Â  Â  Â  run_playbook:&#xA;Â  Â  Â  Â  Â  name: remediation-playbooks/storage-playbook.yml&#xA;&#xA;Â  Â  - name: memory full on server&#xA;Â  Â  Â  condition: event.alert.labels.job == &#34;memory&#34; and event.alert.status == &#34;firing&#34;&#xA;Â  Â  Â  action:&#xA;Â  Â  Â  Â  run_playbook:&#xA;Â  Â  Â  Â  Â  name: remediation-playbooks/memory-playbook.yml&#xA;&#xA;Â  Â  - name: ssh server down&#xA;Â  Â  Â  condition: event.alert.labels.job == &#34;ssh&#34; and event.alert.status == &#34;firing&#34;&#xA;Â  Â  Â  action:&#xA;Â  Â  Â  Â  run_playbook:&#xA;Â  Â  Â  Â  Â  name: remediation-playbooks/ssh-playbook.yml&#xA;&#xA;Â  Â  - name: CPU full on server&#xA;Â  Â  Â  condition: event.alert.labels.job == &#34;cpu&#34; and event.alert.status == &#34;firing&#34;&#xA;Â  Â  Â  action:&#xA;Â  Â  Â  Â  run_playbook:&#xA;Â  Â  Â  Â  Â  name: remediation-playbooks/cpu-playbook.yml&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For a self-healing server, we must list all conditions or scenarios where we can anticipate the server facing issues like full storage, memory fully utilized, and so on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Accordingly, we have to find the remediation of that issue and create an Ansible Playbook that resolves that issue after triggering that issue without manual intervention.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Create the inventory file with localhost as host:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;localhostÂ &lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;3. Run Ansible Rulebook&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Use the &lt;code&gt;ansible-rulebook&lt;/code&gt; command to run the rulebook:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;ansible-rulebook --rulebook ansible-rulebook.yaml -i inventory -v&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;05:13:46,294 - ansible_rulebook.app - INFO - Starting sources&#xA;05:13:46,294 - ansible_rulebook.app - INFO - Starting rules&#xA;05:13:46,294 - ansible_rulebook.engine - INFO - run_ruleset&#xA;05:13:47 496 [main] INFO org.drools.ansible.rulebook.integration.api.rulesengine.AbstractRulesEvaluator - Start automatic pseudo clock with a tick every 100 milliseconds&#xA;05:13:48,402 - ansible_rulebook.engine - INFO - load source filters&#xA;05:13:48,403 - ansible_rulebook.engine - INFO - loading eda.builtin.insert_meta_info&#xA;05:13:48,887 - ansible_rulebook.engine - INFO - Calling main in ansible.eda.alertmanager&#xA;05:13:48,890 - ansible_rulebook.engine - INFO - Waiting for all ruleset tasks to end&#xA;05:13:48,890 - ansible_rulebook.rule_set_runner - INFO - Waiting for actions on events from Automatic Remediation of a webserver&#xA;05:13:48,890 - ansible_rulebook.rule_set_runner - INFO - Waiting for events, ruleset: Automatic Remediation of a webserver&#xA;05:13:48 891 [drools-async-evaluator-thread] INFO org.drools.ansible.rulebook.integration.api.io.RuleExecutorChannel - Async channel connected&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It will wait for the Alertmanager alert to fire and status changes to firing.&lt;strong&gt;Â &lt;/strong&gt;Then only the Ansible rule will trigger. Conditions also play a major role. We are using the &lt;strong&gt;and&lt;/strong&gt; functionality of two functions. The first one is for &lt;strong&gt;firing&lt;/strong&gt; status, and the second one is for &lt;strong&gt;job labe&lt;/strong&gt;&lt;strong&gt;l &lt;/strong&gt;match.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can assign different labels to different applications and we can trigger the rulebook based on status.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;4. Trigger the alerts of Alertmanager&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The status of alert changed from stable to firing condition as shown inÂ Figure 1. In labels as a job, we can change the application name and trigger the specific remediation playbook.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;rhd-c-figure&#34;&gt;&#xA;  &lt;article class=&#34;align-center media media--type-image media--view-mode-article-content&#34;&gt;&lt;div class=&#34;field field--name-image field--type-image field--label-hidden field__items&#34;&gt;&#xA;  &lt;a href=&#34;https://developers.redhat.com/sites/default/files/self-heal.png&#34; data-featherlight=&#34;image&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://developers.redhat.com/sites/default/files/styles/article_floated/public/self-heal.png?itok=5qH30eVF&#34; width=&#34;600&#34; height=&#34;279&#34; alt=&#34;A screenshot of the Alertmanager rules dashboard showing triggered rules.&#34; typeof=&#34;Image&#34; /&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;field field--name-field-caption field--type-string field--label-hidden field__items&#34;&gt;&#xA;      &lt;div class=&#34;rhd-c-caption field__item&#34;&gt;Figure 1: The Alertmanager rules dashboard showing triggered rules.&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;      &lt;/article&gt;&lt;/div&gt;&#xA;&lt;p&gt;Go back to the Ansible Rulebook CLI terminal where the rulebook was run. The logs show that the rule was triggered and the remediation playbook was run.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;2023-06-20 05:26:46,907 - aiohttp.access - INFO - 4.246.213.96 [20/Jun/2023:05:26:46 +0000] &#34;POST /alerts HTTP/1.1&#34; 202 164 &#34;-&#34; &#34;Alertmanager/0.23.0&#34;&#xA;2023-06-20 05:26:46,935 - ansible_rulebook.rule_generator - INFO - calling restart web server&#xA;2023-06-20 05:26:46,938 - ansible_rulebook.rule_set_runner - INFO - call_action run_playbook&#xA;2023-06-20 05:26:46,938 - ansible_rulebook.rule_set_runner - INFO - substitute_variables&#xA;2023-06-20 05:26:46,938 - ansible_rulebook.rule_set_runner - INFO - action args: {&#39;name&#39;: &#39;say-what.yml&#39;}&#xA;2023-06-20 05:26:46,938 - ansible_rulebook.builtin - INFO - running Ansible playbook: say-what.yml&#xA;2023-06-20 05:26:46,942 - ansible_rulebook.builtin - INFO - ruleset: Automatic Remediation of a webserver, rule: restart web server&#xA;2023-06-20 05:26:46,942 - ansible_rulebook.builtin - INFO - Calling Ansible runner&#xA;2023-06-20 05:26:46,943 - aiohttp.access - INFO - 4.246.213.96 [20/Jun/2023:05:26:46 +0000] &#34;POST /alerts HTTP/1.1&#34; 202 164 &#34;-&#34; &#34;Alertmanager/0.23.0&#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;5. Containerize Event-Driven Ansible functionality&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;You can also create containers on Event-Driven AnsibleÂ using the following Containerfile:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;FROM registry.access.redhat.com/ubi9-minimal&#xA;RUN microdnf install java-17 python3 gcc python3-devel -y &amp;amp;&amp;amp; microdnf clean all &amp;amp;&amp;amp; python -m ensurepip --upgrade &amp;amp;&amp;amp; pip3 install ansible ansible-rulebook asyncio aiokafka aiohttp aiosignal&#xA;ENV JAVA_HOME=&#34;/usr/lib/jvm/jre-17&#34;&#xA;RUN mkdir /eda-ansible&#xA;RUN ansible-galaxy collection install ansible.eda&#xA;WORKDIR /eda-ansible&#xA;COPY. /eda-ansible&#xA;CMD ansible-rulebook -i inventory --rulebook ansible-rulebook.yamlÂ  --verbose&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Integrate Event-Driven Ansible in the podman-compose file. Compose files will create a container and run it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;version: &#39;3&#39;&#xA;services:&#xA;Â  event-driven:&#xA;Â  build:.&#xA;Â  ports:&#xA;Â  Â  - 5000:5000&#xA;Â  depends_on:&#xA;Â  Â  - prometheus&#xA;Â  Â  - alertmanager&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To run Prometheus, Alertmanager, and the event-driven rulebook, use the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code class=&#34;language-bash&#34;&gt;podman-compose up -d&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You will get the same results.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Continue your automation journey with Ansible Automation Platform&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Get started with Ansible Automation Platform by exploring interactive &lt;a href=&#34;https://developers.redhat.com/products/ansible/getting-started&#34;&gt;hands-on labs&lt;/a&gt;. &lt;a href=&#34;https://developers.redhat.com/products/ansible/download#ansibleways&#34;&gt;Download&lt;/a&gt; Ansible Automation Platform at no cost and begin your automation journey.&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/04/5-steps-build-self-healing-server-alertmanager&#34; title=&#34;5 steps to build a self-healing server with Alertmanager&#34;&gt;5 steps to build a self-healing server with Alertmanager&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Keycloak 22.0.4 released</title>
    <updated>2023-10-04T00:00:00Z</updated>
    <id>https://www.keycloak.org/2023/10/keycloak-2204-released</id>
    <link href="https://www.keycloak.org/2023/10/keycloak-2204-released" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Red Hat Developer: Beyond Loom: Weaving new concurrency patterns</title>
    <updated>2023-10-03T07:00:00Z</updated>
    <id>887870d2-b12c-413c-bed4-c6040f0b4c21</id>
    <link href="https://developers.redhat.com/articles/2023/10/03/beyond-loom-weaving-new-concurrency-patterns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In this article we&#39;re going to discuss some new patterns for concurrent systems that are enabled by the new virtual threads feature from Java 21 and some related new features that &#34;follow on&#34; from virtual threadsââspecifically &lt;strong&gt;Structured Concurrency&lt;/strong&gt; (JEP 453) and &lt;strong&gt;Scoped Values&lt;/strong&gt; (JEP 446).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that as of JDK 21, both Structured Concurrency and Scoped Values are in Preview state and so cannot really be used in production applications.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With this limitation in mind, let&#39;s start by looking at the patterns that are enabled by virtual threads aloneââwhich can, therefore, be used without restriction in Java 21 applications.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;_virtual_thread_concurrency_patterns&#34;&gt;Virtual thread concurrency patterns&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://openjdk.org/jeps/444&#34;&gt;Virtual threads&lt;/a&gt; were introduced in Java 21 as one of the major outputs from &lt;a href=&#34;https://openjdk.org/projects/loom/&#34;&gt;Project Loom&lt;/a&gt; and are, perhaps, most similar to goroutines from the &lt;a href=&#34;https://developers.redhat.com/topics/go&#34;&gt;Go&lt;/a&gt; language.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The aim of the project was to solve a scalability problem with Java&#39;s concurrency model, which was formerly based solely on operating system (a.k.a. platform) threads. This is achieved by introducing a new type of thread, known as a &lt;strong&gt;virtual thread&lt;/strong&gt; (or vthreads for short).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Vthreads are managed by the JVM and are not permanently associated with a platform thread. They only use a platform thread (called the &lt;strong&gt;carrier&lt;/strong&gt;) when they are actually running, and they are much cheaper to create and destroy than platform threads.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To operate, vthreads automatically unbind from their carrier whenever they encounter a blocking I/O call.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One side effect of this, and our first new pattern, is that vthreads should completely remove the need for developers to use the non-blocking form of the NIO APIs directly. Instead, for each task, programs can create a dedicated virtual thread that uses the blocking API and let the runtime sort it out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The intent is that this is essentially the same thing as using non-blocking I/O in terms of performance while providing a simpler programming model.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In fact, avoiding more complex programming models that display asynchronous contagion (such as async-await or colored functions) was a major design goal for Project Loom. (Colored functions were named as such in the blog post&lt;a href=&#34;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&#34;&gt; What Color is Your Function?&lt;/a&gt;, although the author incorrectly assumes that Java is planning to support async-await.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At the same time, bringing explicit &#34;reactive approaches&#34; into the JDK was a definite non-goal. The end result was the form of virtual threads that we see in Java 21.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This great new language feature opens the door to some interesting new patterns. We&#39;ve already discussed the possible sunsetting of the direct use of non-blocking I/O, but let&#39;s look at some others, starting with one of the most obvious:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just replace some of your program&#39;s threads with vthreads.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The carrier threads for vthreads come from a &lt;code&gt;ForkJoinPool&lt;/code&gt; executor and will yield on (most) blocking operations. This means that for threads that do at least some I/O, then there is a &lt;em&gt;potential&lt;/em&gt; performance benefit by switching them to virtual.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should remember that performance depends on a lot of things, and vthread&#39;s main advantage is programmer convenience and maintainability. So, if we are able to obtain a performance boost by converting some threads to virtual then we have to test the changeââin a real-world complete systemââto ensure that we actually realize the expected benefit.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, remember that Java 21 does not automatically make existing code use virtual threadsâunless you explicitly construct a virtual thread, you will always get a platform thread.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As well as manual creation of virtual threads, there is also a new executor type, which we can get from &lt;code&gt;Executors.newVirtualThreadPerTaskExecutor()&lt;/code&gt;. As the name suggests, rather than relying upon a traditional threadpool that is reused for multiple tasks, this executor creates a new virtual thread for each task that is submitted.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To accommodate this new executor type, the &lt;code&gt;ExecutorService&lt;/code&gt; interface is now &lt;code&gt;AutoCloseable&lt;/code&gt;âso it can be used in try-with-resources blocks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is a great example of a new pattern that is designed specifically for virtual threads. Executors for platform threads are typically long-lived objectsââbecause they create threads at startup, which is an expensive operation. Therefore, it doesn&#39;t make sense to create them as local objects within a methodââthey&#39;re much more likely to be seen as (possibly static) fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Virtual threads, on the other hand, are very cheap to createââthey&#39;re just Java objects without any permanently allocated native resources. Creating an executor for virtual threads is similarly cheap, and so creating a locally scoped executor avoids a possible performance penalty.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This leads to code like this example showing the bare bones of a web server, which makes use of the block-scoped virtual thread executor:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;    private volatile boolean isShutdown = false;&#xA;&#xA;    void handle(Socket socket) {&#xA;        // Handle incoming request&#xA;    }&#xA;&#xA;    void serveVT(ServerSocket serverSocket) throws IOException, InterruptedException {&#xA;        try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {&#xA;            try {&#xA;                while (!isShutdown) {&#xA;                    var socket = serverSocket.accept();&#xA;                    executor.submit(() -&gt; handle(socket));&#xA;                }&#xA;            } finally {&#xA;                // If there&#39;s been an error, or we&#39;re interrupted, we stop accepting&#xA;                executor.shutdown();&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public shutdown() {&#xA;        isShutdown = true;&#xA;    }&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The server socket is passed into the main &lt;code&gt;serveVT()&lt;/code&gt; method and handles each incoming request by starting a new virtual thread.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Every request is isolated from every other request, so there is no need to share data or context, and the requests will all complete in bounded time (and require network I/O). We can call this type of operation &lt;strong&gt;fire-and-forget&lt;/strong&gt;, and this pattern is very suitable for implementing a simple web server using vthreads.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that this code uses the &lt;strong&gt;Volatile Shutdown&lt;/strong&gt; pattern to provide a controlled shutdown of the serverââanother thread calls the &lt;code&gt;shutdown()&lt;/code&gt; method, and the volatile nature of the boolean ensures that the no more incoming requests will be processed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let&#39;s move on to meet the new Preview APIs that arrived in Java 21 and complement virtual threads.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;_structured_concurrency&#34;&gt;Structured Concurrency&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The first of the two new APIs is known as &lt;strong&gt;Structured Concurrency&lt;/strong&gt;. This is an API for thread handling, which provides an approach for cooperating tasks (often virtual threads) to be considered and managed collectively as a collection of subtasks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One class of problem in concurrent programming is known as &lt;strong&gt;data-parallel problems&lt;/strong&gt;. These are problems where the same operation is applied to a large amount of data, and the operations are (more or less) independent of each other. This is the domain of applicability of such things as Amdahl&#39;s Law, a well-known constraint on the ability of parallel computing to speed up computation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By contrast, Structured Concurrency is designed for &lt;strong&gt;task-parallel problems&lt;/strong&gt;, which involves different but related subtasks that need to proceed in parallel. The API&#39;s affinity to virtual threads means it is primarily useful for tasks involving some amount of I/O (especially calls to remote services). However, the approach is much less useful for operations that act solely (or mostly) on in-memory data because virtual threads will contend with each other for CPU time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The general flow for a structured concurrency task looks something like this:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Create a task scopeââthe creating thread &lt;em&gt;owns&lt;/em&gt; the scope.&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Fork concurrent subtasks in the scope (each is a virtual thread).&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Scope owner joins the scope (all subtasks) as a unit.&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Scopeâs &lt;code&gt;join()&lt;/code&gt; method blocks until all subtasks have completed.&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;After joining, owner handles any errors in forks and processes results.&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Owner closes the scope.&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;p&gt;It&#39;s worth pointing out that the version of Structured Concurrency that shipped in Java 21 included some minor API changes over Java 20. The main one is that &lt;code&gt;fork()&lt;/code&gt; now returns a &lt;code&gt;Subtask&lt;/code&gt; (which implements &lt;code&gt;Supplier&lt;/code&gt;) instead of a bare &lt;code&gt;Future&lt;/code&gt; (as it was in Java 20).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The reason for this new interface, rather than just using &lt;code&gt;Future&lt;/code&gt;, is that results are only queried after a &lt;code&gt;join()&lt;/code&gt;, because Structured Concurrency treats multiple subtasks as single unit of work. As a result, neither blocking calls to &lt;code&gt;get()&lt;/code&gt; nor checked exceptions from subtasks are useful, and so &lt;code&gt;Future&lt;/code&gt; is something of an awkward interface (&lt;code&gt;Subtask&lt;/code&gt; is a checked-exception-free interface).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Developers who have previously used the older previews of Structured Concurrency should be aware of this change when upgrading.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let&#39;s see this in action in an example using the calculation of a stock tip, a record class that we&#39;ll define like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;record StockTip(String symbol, double sentiment, double delta24) {}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We&#39;ll assume that the strength of the market&#39;s attitude to the stock (the &lt;code&gt;sentiment&lt;/code&gt;) and the possible change in price over the next 24 hours (the &lt;code&gt;delta24&lt;/code&gt;) are to be calculated by some external process. These elements might take some time to compute, and this is likely to involve network traffic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can therefore use structured subtasks to compute them, like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;try (var scope = new StructuredTaskScope.ShutdownOnFailure()) {&#xA;    Callable&lt;Double&gt; getSentiment = () -&gt; getSentiment(s);&#xA;    Subtask&lt;Double&gt; fSentiment = scope.fork(getSentiment);&#xA;&#xA;    Callable&lt;Double&gt; getDelta = () -&gt; getDelta24(s);&#xA;    Subtask&lt;Double&gt; fDelta = scope.fork(getDelta);&#xA;&#xA;    scope.join();&#xA;    scope.throwIfFailed();&#xA;&#xA;    return new StockTip(s, fSentiment.get(), fDelta.get());&#xA;} catch (ExecutionException | InterruptedException e) {&#xA;    throw new RuntimeException(e);&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This follows the general flow for structured concurrency that we established above. Note that closing the scope is handled implicitly via the try-with-resources blockââthis shuts down the scope and waits for any straggling subtasks to complete.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We should also point out a couple of other points.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Firstly, joining the subtasks can also be canceled by calling a &lt;code&gt;shutdown()&lt;/code&gt; method. Secondly, there is also a timed variant of &lt;code&gt;join()&lt;/code&gt;, called &lt;code&gt;joinUntil()&lt;/code&gt;, which accepts a deadline (as an &lt;code&gt;Instant&lt;/code&gt; parameter).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are two built-in shutdown policies for the scope (and custom shutdown policies are also supported):&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Cancel all subtasks if one of them fails (&lt;code&gt;ShutdownOnFailure&lt;/code&gt;)&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Cancel all subtasks if one of them succeeds (&lt;code&gt;ShutdownOnSuccess&lt;/code&gt;)&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;We met the first of these inbuilt options in our first example, and so let&#39;s move on to introduce the other.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Consider a library method where multiple subtasks are launched (possibly multiple copies of the same subtask), and the first result (from any of the subtasks) will do. The tasks are racing each other to complete, and the rest of the virtual threads should be shut down as soon as the first success occurs, so we should use the &lt;code&gt;ShutdownOnSuccess&lt;/code&gt; policy, like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;&lt;T&gt; T race(List&lt;Callable&lt;T&gt;&gt; tasks, Instant deadline)&#xA;        throws InterruptedException, ExecutionException, TimeoutException {&#xA;&#xA;    try (var scope = new StructuredTaskScope.ShutdownOnSuccess&lt;T&gt;()) {&#xA;        for (var task : tasks) {&#xA;            scope.fork(task);&#xA;        }&#xA;        return scope.joinUntil(deadline)&#xA;                    .result();  // Throw if none of the subtasks completed successfully&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This has an obvious dual, i.e., when all tasks must run to completion (and where a failure of any subtask should cancel the entire task, so we&#39;ll use &lt;code&gt;ShutdownOnFailure&lt;/code&gt; again):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;&lt;T&gt; List&lt;T&gt; runAll(List&lt;Callable&lt;T&gt;&gt; tasks)&#xA;        throws InterruptedException, ExecutionException {&#xA;&#xA;    try (var scope = new StructuredTaskScope.ShutdownOnFailure()) {&#xA;        List&lt;? extends Subtask&lt;T&gt;&gt; handles =&#xA;            tasks.stream().map(scope::fork).toList();&#xA;&#xA;        scope.join()&#xA;             .throwIfFailed();  // Propagate exception if any subtask fails&#xA;&#xA;        // Here, all tasks have succeeded, so compose their results&#xA;        return handles.stream().map(Subtask::get).toList();&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that this version of the code rematerializes the results into a &lt;code&gt;List&lt;/code&gt;, but it&#39;s also possible to imagine a version that had a different terminal operation that reduced the results and returned a single value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can build more complex structures as wellââthe subtasks that we created using forks can themselves create scopes (subscopes). This naturally induces a tree structure of scopes and subtasks, which is useful when we want to condense a final value out of a tree of subtasks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If, however, the main point of our code is to operate via side effects, then it is possible to use a &lt;code&gt;StructuredTaskScope&lt;Void&gt;&lt;/code&gt;âi.e., use a task scope that returns &lt;code&gt;void&lt;/code&gt;, such as in this example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;void serveScope(ServerSocket serverSocket) throws IOException, InterruptedException {&#xA;    try (var scope = new StructuredTaskScope&lt;Void&gt;()) {&#xA;        try {&#xA;            while (true) {&#xA;                final var socket = serverSocket.accept();&#xA;                Callable&lt;Void&gt; task = () -&gt; {&#xA;                    handle(socket);&#xA;                    return null;&#xA;                };&#xA;                scope.fork(task);&#xA;            }&#xA;        } finally {&#xA;            // If there&#39;s been an error or we&#39;re interrupted, we stop accepting&#xA;            scope.shutdown();  // Close all active connections&#xA;            scope.join();&#xA;        }&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, this is arguably often better handled using a fire-and-forget pattern, such as &lt;code&gt;newVirtualThreadPerTaskExecutor()&lt;/code&gt;. There are also some small wrinkles with the generics here, âsuch as needing to explicitly return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One recurring theme in all the patterns that we have met so far is that using these techniques requires applying design thinking and knowledge of the domain and context of the problem being solved. There is no software tool that can tell with 100% accuracy whether a thread is a good candidate for being converted to a vthreadââthat is a task for a human software engineer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Likewise, the restructuring of a task into subtasks and the definition of the relevant scopes requires the programmer to have a good understanding of the domain and any data dependencies between the subtasks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let&#39;s move on to look at the second of the new APIs that we want to discuss.&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;_scoped_values&#34;&gt;Scoped Values&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;In addition to Structured Concurrency, the new Scoped Values API arrived in Java 21 as Preview. &lt;a href=&#34;https://developers.redhat.com/java/red-hat-and-java&#34;&gt;Red Hat contributes to many projects within OpenJDK&lt;/a&gt;, including Project Loom, and we are the main contributors to the Scoped Values API. &lt;a href=&#34;https://developers.redhat.com/author/andrew-haley&#34;&gt;Andrew Haley&lt;/a&gt;, one of our Distinguished Engineers, is the overall lead for the Scoped Values JEP.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Scoped Values API is based on a new class &lt;code&gt;ScopedValue&lt;T&gt;&lt;/code&gt; in &lt;code&gt;java.lang&lt;/code&gt;, and it represents a &lt;em&gt;binding&lt;/em&gt; of a value to a variable within a specific scope. This value is written once and is then immutable on a per-scope basis.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The bound value can be retrieved at any point down any call chain within the scope, but only within the scope in which it was setââthis provides robustness and a form of encapsulation. In particular, there is no need to explicitly pass the scoped value down the call chain.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Scoped values can be thought of as invisible parameters that go into every method and are, in turn, passed to every method they invoke. We sometimes say they are &lt;em&gt;implicitly&lt;/em&gt; available, but this is a much more controlled (and more Java-ish) form than, say, Scala&#39;s implicit method parameters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Scoped Values API can also be thought of as a modern alternative to thread-local variables, but with a number of enhancements, such as immutability. This means that there is no &lt;code&gt;set()&lt;/code&gt; method to let faraway code change a scoped value. This also enables possible future runtime optimizations, as the runtime can be certain that a scoped value cannot change.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some goals of the API are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&#xA;&#x9;&lt;p&gt;To share data within a thread and with child threads&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Controlled and bounded lifetime of values&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Lifetimes visible from the structure of code&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Immutability allows sharing by lots of threads&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Immutability andÂ explicit lifetime is often a better fit&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;It is not necessary for programmers to move away from &lt;code&gt;ThreadLocal&lt;/code&gt;, but scoped values combine well with virtual thread patterns, such as fire-and-forget. It therefore seems quite likely that as scoped values are adopted, then &lt;code&gt;ThreadLocal&lt;/code&gt; will be gradually replaced for almost all use cases.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let&#39;s rewrite the virtual thread web server to use scoped values:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;public class ServerSV {&#xA;    public final static ScopedValue&lt;Socket&gt; SOCKETSV = ScopedValue.newInstance();&#xA;&#xA;    void serve(ServerSocket serverSocket) throws IOException, InterruptedException {&#xA;        while (true) {&#xA;            var socket = serverSocket.accept();&#xA;            ScopedValue.where(SOCKETSV, socket)&#xA;                        .run(() -&gt; handle());&#xA;        }&#xA;    }&#xA;&#xA;    private void handle() {&#xA;        var socket = SOCKETSV.get();&#xA;        // handle incoming traffic&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that the &lt;code&gt;handle()&lt;/code&gt; method now no longer takes a parameter, and instead, the socket is accessed via the scoped valueââthis is the implicit availability we discussed above.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This example is very simple, as all we&#39;re really doing is to replace the parameter passing with a scoped valueââan almost trivial application. The real power of scoped values is that the call chains and the scoping and subscoping can be arbitrarily complex, and the scoped value will still be available.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Overall, the intent of scoped values is to provide a &lt;strong&gt;dynamic scope&lt;/strong&gt;, a concept that has not been seen in Java before. This approach to scopes is similar to that found in some other languagesââsuch as shells, Lisp dialects, and Perl.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can contrast it with the traditional Java form of scopingââusually called &lt;strong&gt;lexical scoping&lt;/strong&gt;. This is where the scope of a variable is determined by the structure of the code, usually defined by a matching pair of curly braces.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Our dynamic scoping example shows a key pattern in action:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Using a &lt;code&gt;static final&lt;/code&gt; field as a holder for a scoped value&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Declaring the &lt;code&gt;ScopedValue&lt;/code&gt; instance in class scope&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Creating the dynamic scope (e.g.,Â &lt;code&gt;runWhere()&lt;/code&gt;) within a method&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;&#xA;&#x9;&lt;p&gt;Using a lambda to define the scope body (where the call chains will live)&lt;/p&gt;&#xA;&#x9;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;p&gt;Scoped values are intended to be very useful for passing values like transaction contexts and other examples of &lt;strong&gt;ambient context&lt;/strong&gt; data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Scoped values interact well with structure concurrency, as they can be constructed for scope and then &lt;em&gt;rebound&lt;/em&gt; by subscopes. Any values that are not rebound will be inherited by the subscope. This technique allows for upgrading access control and similar patterns, such as in this example, where we will consider two security access levels:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;enum SecurityLevel { USER, ADMIN }&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We&#39;ll use a scoped value to hold the current security level and another to hold the current request number:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;    private static final ScopedValue&lt;SecurityLevel&gt; securitySV = ScopedValue.newInstance();&#xA;    private static final ScopedValue&lt;Integer&gt; requestSV = ScopedValue.newInstance();&#xA;&#xA;    private final AtomicInteger req = new AtomicInteger();&#xA;&#xA;    public void run() {&#xA;        ScopedValue.where(securitySV, level())&#xA;                .where(requestSV, req.getAndIncrement())&#xA;                .run(() -&gt; process());&#xA;    }&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To demonstrate rebinding, let us assume that admin privileges are not available, and so any attempt to use them will result in a fallback to user privileges:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code data-lang=&#34;java&#34;&gt;    private void process() {&#xA;        var level = securitySV.get();&#xA;        if (level == SecurityLevel.USER) {&#xA;            System.out.println(&#34;User privileges granted for &#34;+ requestSV.get() +&#34; on: &#34;+ Thread.currentThread());&#xA;        } else {&#xA;            System.out.println(&#34;Admin privileges requested for &#34;+ requestSV.get() +&#34; on: &#34;+ Thread.currentThread());&#xA;            System.out.println(&#34;System is in lockdown. Falling back to user privileges&#34;);&#xA;            ScopedValue.where(securitySV, SecurityLevel.USER)&#xA;                    .run(() -&gt; process());&#xA;        }&#xA;    }&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To conclude this article, we should also point out that classes that represent continuations and other low-level building blocks for virtual threads and other components do exist in Java 21. However, they are in the package &lt;code&gt;jdk.internal.vm&lt;/code&gt; and so are not intended for direct use by Java programmers as of this release.&lt;/p&gt;&#xA;The post &lt;a href=&#34;https://developers.redhat.com/articles/2023/10/03/beyond-loom-weaving-new-concurrency-patterns&#34; title=&#34;Beyond Loom: Weaving new concurrency patterns&#34;&gt;Beyond Loom: Weaving new concurrency patterns&lt;/a&gt; appeared first on &lt;a href=&#34;https://developers.redhat.com/blog&#34; title=&#34;Red Hat Developer&#34;&gt;Red Hat Developer&lt;/a&gt;.&#xA;&lt;br /&gt;&lt;br /&gt;</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Virtual Threads with Quarkus made easy</title>
    <updated>2023-10-02T13:43:50Z</updated>
    <id>https://www.mastertheboss.com/soa-cloud/quarkus/virtual-threads-with-quarkus-made-easy/</id>
    <link href="https://www.mastertheboss.com/soa-cloud/quarkus/virtual-threads-with-quarkus-made-easy/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Testing virtual thread applications</title>
    <updated>2023-10-02T00:00:00Z</updated>
    <id>https://quarkus.io/blog/virtual-threads-3/</id>
    <link href="https://quarkus.io/blog/virtual-threads-3/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Quarkus: Testing virtual thread applications</title>
    <updated>2023-10-02T00:00:00Z</updated>
    <id>https://quarkus.io/blog/virtual-threads-3/</id>
    <link href="https://quarkus.io/blog/virtual-threads-3/" rel="alternate"></link>
    <summary type="html">In a previous post, we have seen how to implement a CRUD application using virtual threads in Quarkus. The following video shows how to test this application and, specifically, how to detect pinning. The complete code of the application and the tests are available in the virtual threads demos repository....</summary>
  </entry>
  <entry>
    <title>Quarkus: Live diff and update quarkus deployments in OpenShift using Jetbrains IDEA</title>
    <updated>2023-09-28T00:00:00Z</updated>
    <id>https://quarkus.io/blog/live-diff-and-update-using-idea/</id>
    <link href="https://quarkus.io/blog/live-diff-and-update-using-idea/" rel="alternate"></link>
    <summary type="html">Prerequisites OpenShift CLI, oc: installation instructions Kubernetes by Red Hat, Kubernetes Plugin for JetBrains IDEA Marketplace Quarkus CLI, Quarkus: Installation Instructions Optional: Source code for this blog post: https://github.com/adietish/openshift-quickstart IntelliJ Kubernetes Plugin This shows you how the Kubernetes Plugin for Jetbrains IDEA is a great companion when deploying quarkus apps...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Live diff and update quarkus deployments in OpenShift using Jetbrains IDEA</title>
    <updated>2023-09-28T00:00:00Z</updated>
    <id>https://quarkus.io/blog/live-diff-and-update-using-idea/</id>
    <link href="https://quarkus.io/blog/live-diff-and-update-using-idea/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Just: a tool to store and execute your project commands</title>
    <updated>2023-09-27T14:07:46Z</updated>
    <id>https://www.mastertheboss.com/various-stuff/just-a-tool-to-store-and-execute-your-project-commands/</id>
    <link href="https://www.mastertheboss.com/various-stuff/just-a-tool-to-store-and-execute-your-project-commands/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Hacktoberfest 2023</title>
    <updated>2023-09-27T00:00:00Z</updated>
    <id>https://wildfly.org//news/2023/09/27/Hacktoberfest-2023/</id>
    <link href="https://wildfly.org//news/2023/09/27/Hacktoberfest-2023/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Mastering Virtual Threads: A Comprehensive Tutorial</title>
    <updated>2023-09-25T10:54:36Z</updated>
    <id>https://www.mastertheboss.com/java/mastering-virtual-threads-a-comprehensive-tutorial/</id>
    <link href="https://www.mastertheboss.com/java/mastering-virtual-threads-a-comprehensive-tutorial/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Writing CRUD applications using virtual threads</title>
    <updated>2023-09-25T00:00:00Z</updated>
    <id>https://quarkus.io/blog/virtual-threads-2/</id>
    <link href="https://quarkus.io/blog/virtual-threads-2/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Quarkus: Writing CRUD applications using virtual threads</title>
    <updated>2023-09-25T00:00:00Z</updated>
    <id>https://quarkus.io/blog/virtual-threads-2/</id>
    <link href="https://quarkus.io/blog/virtual-threads-2/" rel="alternate"></link>
    <summary type="html">Last week, we published a video demonstrating the creation of a CRUD application using virtual threads in Quarkus. Itâs as simple as adding the @RunOnVirtualThread annotation on your HTTP resource (or your controller class if you use the Spring compatibility layer). This companion post explains how it works behind the...</summary>
  </entry>
  <entry>
    <title>Quarkus: Quarkus 3.4.1 released - Redis 7.2 and Flyway changes</title>
    <updated>2023-09-20T00:00:00Z</updated>
    <id>https://quarkus.io/blog/quarkus-3-4-1-released/</id>
    <link href="https://quarkus.io/blog/quarkus-3-4-1-released/" rel="alternate"></link>
    <summary type="html">It is our pleasure to announce the release of Quarkus 3.4.1. We skipped 3.4.0 as we needed a fix for CVE-2023-4853 in 3.4 too. Major changes are: Support for Redis 7.2 Adjustments on how to enable/activate Flyway This version also comes with bugfixes, performance improvements and documentation improvements. We currently...</summary>
  </entry>
  <entry>
    <title>Quarkus: Observability in Quarkus 3</title>
    <updated>2023-09-20T00:00:00Z</updated>
    <id>https://quarkus.io/blog/quarkus-observability-3-3/</id>
    <link href="https://quarkus.io/blog/quarkus-observability-3-3/" rel="alternate"></link>
    <summary type="html">Observability in Quarkus Observability on a software system can be described as the capability to allow a human to ask and answer questions. To enable developers and support engineers in understanding how their applications behave, Quarkus 3.3 includes many improvements to its main observability related extensions: quarkus-opentelemetry (tracing) quarkus-micrometer (metrics)...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Quarkus 3.4.1 released - Redis 7.2 and Flyway changes</title>
    <updated>2023-09-20T00:00:00Z</updated>
    <id>https://quarkus.io/blog/quarkus-3-4-1-released/</id>
    <link href="https://quarkus.io/blog/quarkus-3-4-1-released/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: Observability in Quarkus 3</title>
    <updated>2023-09-20T00:00:00Z</updated>
    <id>https://quarkus.io/blog/quarkus-observability-3-3/</id>
    <link href="https://quarkus.io/blog/quarkus-observability-3-3/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>Quarkus: When Quarkus meets Virtual Threads</title>
    <updated>2023-09-19T00:00:00Z</updated>
    <id>https://quarkus.io/blog/virtual-thread-1/</id>
    <link href="https://quarkus.io/blog/virtual-thread-1/" rel="alternate"></link>
    <summary type="html">Java 21 offers a new feature that will reshape the development of concurrent applications in Java. For over two years, the Quarkus team explored integrating this new feature to ease the development of distributed applications, including microservices and event-driven applications. This blog post is the first part of a series...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: When Quarkus meets Virtual Threads</title>
    <updated>2023-09-19T00:00:00Z</updated>
    <id>https://quarkus.io/blog/virtual-thread-1/</id>
    <link href="https://quarkus.io/blog/virtual-thread-1/" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - July 03, 2023</title>
    <updated>2023-07-03T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-07-03.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-07-03.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.28.0.Final for Eclipse 2023-03</title>
    <updated>2023-07-03T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.28.0.final.html</id>
    <link href="https://tools.jboss.org/blog/4.28.0.final.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.28.0.Final build for Eclipse 2023-06.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.28.0 Final.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Components Depreciation&#xA;      &#xA;      As communicated in a previous blog article, the following components are now deprecated:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Openshift CDK Tooling&#xA;      &#xA;      &#xA;      Openshift Explorer view (already hidden by default) and wizards, targeting Openshift v3&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      The current openshift Application Explorer view, based on odo v3 is now the default supported tooling.&#xA;      &#xA;      Related JIRA: JBIDE-29044&#xA;      &#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      Runtime Provider Updates&#xA;      &#xA;      The Hibernate 6.2 runtime provider now incorporates Hibernate Core version 6.2.5.Final, Hibernate Ant version 6.2.5.Final and Hibernate Tools version 6.2.5.Final.&#xA;      &#xA;      &#xA;      The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.30.Final...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools for Eclipse 2023-06M2</title>
    <updated>2023-06-05T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.28.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.28.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.28.0.AM1 (Developer Milestone 1) build for Eclipse 2023-06M2.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.28.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Components Depreciation&#xA;      &#xA;      Fuse Tooling is now deprecated. More information here.&#xA;      &#xA;      &#xA;      &#xA;      Components Removal&#xA;      &#xA;      As previously announced here, weâve removed the Central / update tab, SEAM and JSF support from JBossTools.&#xA;      &#xA;      &#xA;      For central update tab, all the existing central extensions can be installed with the marketplace client, using the entries listed here.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Future releases cadences&#xA;      &#xA;      Starting from 4.28.0.Final, there will be no more .AM1 releases. The .Final releases can be now scheduled close to the Eclipse releases.&#xA;      &#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      Runtime Provider Updates&#xA;      &#xA;      The Hibernate...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - June, 1st 2023</title>
    <updated>2023-06-01T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-06-01.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-06-01.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - May, 15 2023</title>
    <updated>2023-05-18T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-05-18.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-05-18.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - April, 20 2023</title>
    <updated>2023-04-20T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-04-20.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-04-20.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.27.0.Final for Eclipse 2023-03</title>
    <updated>2023-04-07T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.27.0.final.html</id>
    <link href="https://tools.jboss.org/blog/4.27.0.final.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.27.0.Final build for Eclipse 2023-03.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.27.0 Final.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      We made several fixes in our server and javaee component to support jakarta namespaces.&#xA;      &#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      Runtime Provider Updates&#xA;      &#xA;      The Hibernate 6.2 runtime provider now incorporates Hibernate Core version 6.2.0.CR4, Hibernate Ant version 6.2.0.CR4 and Hibernate Tools version 6.2.0.CR4.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      And moreâ¦â&#xA;      &#xA;      You can find more noteworthy updates in on this page.&#xA;      &#xA;      &#xA;      Enjoy!&#xA;      &#xA;      &#xA;      StÃ©phane Bouchet&#xA;      &#xA;      &#xA;      &#xA;      ...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - April, 06 2023</title>
    <updated>2023-04-06T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-04-06.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-04-06.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - March, 23 2023</title>
    <updated>2023-03-23T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-03-23.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-03-23.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools for Eclipse 2023-03M3</title>
    <updated>2023-03-10T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.27.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.27.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.27.0.AM1 (Developer Milestone 1) build for Eclipse 2023-03M3.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.27.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Components Depreciation&#xA;      &#xA;      As previously announced here, weâre in the process to remove the Central / update tab from JBossTools in next release. This work can be followed here.&#xA;      &#xA;      &#xA;      That means that all the current extra features that can be installed via this tab needs to be available through a new channel. This channel already exists as p2 repo, but using Eclipse Marketplace Client is more close to whatâs existing right now.&#xA;      &#xA;      &#xA;      Most of those additional features...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 10th March 2023</title>
    <updated>2023-03-09T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-03-09.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-03-09.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 24th February 2023</title>
    <updated>2023-02-24T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-02-24.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-02-24.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 26 January 2023</title>
    <updated>2023-02-08T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-02-08.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-02-08.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 26 January 2023</title>
    <updated>2023-01-26T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2023-01-26.html</id>
    <link href="https://www.jboss.org/posts/weekly-2023-01-26.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - December, 29th 2022</title>
    <updated>2022-12-29T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-12-29.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-12-29.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.26.0.Final for Eclipse 2022-12</title>
    <updated>2022-12-20T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.26.0.final.html</id>
    <link href="https://tools.jboss.org/blog/4.26.0.final.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.26.0.Final build for Eclipse 2022-12.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.26.0 Final.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Components removal&#xA;      &#xA;      As planned and communicated in a previous blog article, the following components have been&#xA;      removed from the JBoss Tools distribution:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Forge&#xA;      &#xA;      &#xA;      Livereload&#xA;      &#xA;      &#xA;      Angular&#xA;      &#xA;      &#xA;      JSDT&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Please note that the following components are obsoleted so they are still part of this JBoss&#xA;      Tools distribution but they will be removed from the next JBoss Tools release:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      WebServices&#xA;      &#xA;      &#xA;      JSF&#xA;      &#xA;      &#xA;      Seam&#xA;      &#xA;      &#xA;      Batch&#xA;      &#xA;      &#xA;      Visual Page Editor&#xA;      &#xA;      &#xA;      Central installation&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      OpenShift&#xA;      &#xA;      OpenShift Application Explorer view based on odo 3.x&#xA;      &#xA;      The OpenShift Application Explorer view based based on odo 2.x in previous versions of&#xA;      JBoss Tools. It already leverages the power...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - December, 15th 2022</title>
    <updated>2022-12-15T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-12-15.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-12-15.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - December, 1st 2022</title>
    <updated>2022-12-01T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-12-01.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-12-01.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools for Eclipse 2022-12M2</title>
    <updated>2022-11-23T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.26.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.26.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.26.0.AM1 (Developer Milestone 1) build for Eclipse 2022-12M2.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.26.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Components Removal&#xA;      &#xA;      As previously announced, we removed some components in this release :&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Forge&#xA;      &#xA;      &#xA;      Livereload&#xA;      &#xA;      &#xA;      Angular&#xA;      &#xA;      &#xA;      JSDT&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      Runtime Provider Updates&#xA;      &#xA;      The Hibernate 6.1 runtime provider now incorporates Hibernate Core version 6.1.5.Final, Hibernate Ant version 6.1.5.Final and Hibernate Tools version 6.1.5.Final.&#xA;      &#xA;      &#xA;      The Hibernate 5.6 runtime provider now incorporates Hibernate Core version 5.6.13.Final and Hibernate Tools version 5.6.13.Final.&#xA;      &#xA;      &#xA;      The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.28.Final and Hibernate Tools version 5.3.28.Final.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      And moreâ¦â&#xA;      &#xA;      You can find more noteworthy updates in on this...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - November, 18 2022</title>
    <updated>2022-11-18T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-11-18.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-11-18.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: Deprecating and removing components from JBoss Tools</title>
    <updated>2022-11-09T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/2022-11-09-component-lifetime-policy.html</id>
    <link href="https://tools.jboss.org/blog/2022-11-09-component-lifetime-policy.html" rel="alternate"></link>
    <summary type="html">JBoss Tools is a set of Eclipse plugins and features that can be installed from the&#xA;      Eclipse marketplace.&#xA;      &#xA;      &#xA;      It represents a huge code base and is divided into&#xA;      bigger artificats that are called components. The component grouping of plugins and&#xA;      features represents major and independant functionnality: there is one component for&#xA;      OpenShift and another one for Quarkus for example.&#xA;      &#xA;      &#xA;      So there are components that have been started a while ago as the JBoss Tools code base&#xA;      is quite old and other ones that have been started quite recently (eg Quarkus).&#xA;      &#xA;      &#xA;      So there are components that are related to a technology that is not anymore widely used&#xA;      so the component...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - November, 4 2022</title>
    <updated>2022-11-04T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-11-04.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-11-04.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 20 October 2022</title>
    <updated>2022-10-20T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-10-20.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-10-20.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.25.0.Final for Eclipse 2022-09</title>
    <updated>2022-10-17T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.25.0.final.html</id>
    <link href="https://tools.jboss.org/blog/4.25.0.final.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.25.0.Final build for Eclipse 2022-09.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.25.0.Final.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Java 17 requirement&#xA;      &#xA;      Java 17 is now a minimum requirement to run JBoss Tools.&#xA;      JBoss Tools continues to support running servers and applications with older Java versions.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Quarkus Tools&#xA;      &#xA;      Improvement to the new Quarkus project wizard&#xA;      &#xA;      The Quarkus extension ecosystem is composed of extensions that are part of the platform and the others. The Quarkus project wizard has&#xA;      been extended to allow exclusion of extensions that are not part of the platform.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      New Runtime Provider&#xA;      &#xA;      A new runtime provider has been added for Hibernate...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 07 October 2022</title>
    <updated>2022-10-07T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-10-07.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-10-07.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools for Eclipse 2022-09RC1</title>
    <updated>2022-09-29T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.25.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.25.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.25.0.AM1 (Developer Milestone 1) build for Eclipse 2022-09RC1.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.25.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Java 17 requirement&#xA;      &#xA;      Java 17 is now a minimum requirement to run JBoss Tools.&#xA;      JBoss Tools continues to support running servers and applications with older Java versions.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Quarkus Tools&#xA;      &#xA;      Improvement to the new Quarkus project wizard&#xA;      &#xA;      The Quarkus extension ecosystem is composed of extensions that are part of the platform and the others. The Quarkus project wizard has&#xA;      been extended to allow exclusion of extensions that are not part of the platform.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      New Runtime Provider&#xA;      &#xA;      A new runtime provider has...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 22 September 2022</title>
    <updated>2022-09-22T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-09-22.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-09-22.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 08 September 2022</title>
    <updated>2022-09-08T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-09-08.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-09-08.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 25 August 2022</title>
    <updated>2022-08-25T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-08-25.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-08-25.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 11 August 2022</title>
    <updated>2022-08-11T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-08-11.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-08-11.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - July 28th 2022</title>
    <updated>2022-07-28T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-07-28.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-07-28.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 15 July 2022</title>
    <updated>2022-07-14T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-07-14.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-07-14.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools for Eclipse 2022-06</title>
    <updated>2022-07-04T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.24.0.final.html</id>
    <link href="https://tools.jboss.org/blog/4.24.0.final.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.24.0.Final build for Eclipse 2022-06.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.24.0.Final.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Quarkus Tools&#xA;      &#xA;      Improvement to the new Quarkus project wizard&#xA;      &#xA;      When the new Quarkus project wizard was initially design, there were a few Quarkus extensions so it was not difficult to find one from the&#xA;      total list. Now that the Quarkus ecosystem is growing fast, it was difficult even of the extensions were grouped into categories.&#xA;      &#xA;      &#xA;      In order to cope with this issue, the extensions and categories are now displayed in a tree (first level is categories, second level is&#xA;      extensions).&#xA;      &#xA;      &#xA;      This new tree...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - June 30th 2022</title>
    <updated>2022-06-30T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-06-30.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-06-30.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - June 16nd 2022</title>
    <updated>2022-06-16T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-06-16.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-06-16.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools for Eclipse 2022-06M2</title>
    <updated>2022-06-14T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.24.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.24.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.24.0.AM1 (Developer Milestone 1) build for Eclipse 2022-06M2.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.24.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Quarkus Tools&#xA;      &#xA;      Improvement to the new Quarkus project wizard&#xA;      &#xA;      When the new Quarkus project wizard was initially design, there were a few Quarkus extensions so it was not difficult to find one from the&#xA;      total list. Now that the Quarkus ecosystem is growing fast, it was difficult even of the extensions were grouped into categories.&#xA;      &#xA;      &#xA;      In order to cope with this issue, the extensions and categories are now displayed in a tree (first level is categories, second...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - June 2nd 2022</title>
    <updated>2022-06-02T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-06-02.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-06-02.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - May 7th 2022</title>
    <updated>2022-05-07T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-05-07.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-05-07.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 22 April 2022</title>
    <updated>2022-04-22T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-04-22.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-04-22.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools for Eclipse 2022-03</title>
    <updated>2022-04-15T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.23.0.final.html</id>
    <link href="https://tools.jboss.org/blog/4.23.0.final.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.23.0&#xA;      for Eclipse 2022-03 is here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      We highly recommand to download or update to this latest version.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Note for Red Hat CodeReady Studio users&#xA;      &#xA;      &#xA;      The Red Hat CodeReady Studio product has reached end of life. The last release for the product was 12.21.3.GA. So there is no equivalent version of&#xA;      Red Hat CodeReady Studio for this version of JBoss Tools. Existing users of Red Hat CodeReady Studio can upgrade to this version of JBoss Tools.&#xA;      &#xA;      &#xA;      For more information, see this article&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.23 (2022-03)...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 07 April 2022</title>
    <updated>2022-04-07T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-04-07.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-04-07.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 25 March 2022</title>
    <updated>2022-03-25T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-03-25.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-03-25.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools for Eclipse 2022-03RC1</title>
    <updated>2022-03-24T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.23.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.23.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.23.0.AM1 (Developer Milestone 1) build for Eclipse 2022-03RC1.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.23.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      Hibernate Runtime Provider Updates&#xA;      &#xA;      A number of additions and updates have been performed on the available Hibernate runtime  providers.&#xA;      &#xA;      &#xA;      Runtime Provider Updates&#xA;      &#xA;      The Hibernate 6.0 runtime provider (Preview) now incorporates Hibernate Core version 6.0.0.CR1 and Hibernate Tools version 6.0.0.CR1.&#xA;      &#xA;      &#xA;      The Hibernate 5.6 runtime provider now incorporates Hibernate Core version 5.6.5.Final and Hibernate Tools version 5.6.5.Final.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      And moreâ¦â&#xA;      &#xA;      You can find more noteworthy updates in on this page.&#xA;      &#xA;      &#xA;      Enjoy!&#xA;      &#xA;      &#xA;      Jeff Maury&#xA;      &#xA;      &#xA;      &#xA;      ...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 11 March 2022</title>
    <updated>2022-03-11T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-03-11.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-03-11.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - February 25th 2022</title>
    <updated>2022-02-25T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-02-25.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-02-25.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - February 10th 2022</title>
    <updated>2022-02-10T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-02-10.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-02-10.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2021-09</title>
    <updated>2022-02-08T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.21.3.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.21.3.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.21.3 and&#xA;      Red Hat CodeReady Studio 12.21.3&#xA;      for Eclipse 2021-09 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      Weâve released new versions of JBoss Tools and Red Hat CodeReady Studio that switches the version of Apache Log4j to 2.17.1.&#xA;      &#xA;      &#xA;      We highly recommand to download or update to this latest version.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.21 (2021-09) but we recommend&#xA;      using the latest Eclipse 4.21 2021-09...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - January 27th 2022</title>
    <updated>2022-01-27T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-01-27.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-01-27.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - January 13th 2022</title>
    <updated>2022-01-13T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2022-01-13.html</id>
    <link href="https://www.jboss.org/posts/weekly-2022-01-13.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2021-09 security fix release for Apache Log4j CVE-2021-45105 and CVE-2021-44832</title>
    <updated>2022-01-13T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.21.2.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.21.2.ga.html" rel="alternate"></link>
    <summary type="html">Apache Log4j CVE-2021-44832 statement&#xA;      &#xA;      &#xA;      A remote code execution vulnerability in the Apache Log4j 2 Java library when using a JDBC Appender with a JNDI LDAP data source URI (see https://logging.apache.org/log4j/2.x/index.html#News or https://nvd.nist.gov/vuln/detail/CVE-2021-44832) has been releaved to the public audience on Tuesday Dec 28th, 2021.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Apache Log4j CVE-2021-45105 statement&#xA;      &#xA;      &#xA;      A denial of service vulnerability in the Apache Log4j 2 Java library (see https://logging.apache.org/log4j/2.x/index.html#News or https://nvd.nist.gov/vuln/detail/CVE-2021-45105) has been releaved to the public audience on Thursday Dec 30th, 2021.&#xA;      &#xA;      &#xA;      Weâve released new versions of JBoss Tools and Red Hat CodeReady Studio that switches the version of Apache Log4j to 2.17.1.&#xA;      &#xA;      &#xA;      We highly recommand to download or update to...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.21.2.AM1 for Eclipse 2021-09</title>
    <updated>2021-12-22T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.21.2.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.21.2.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.21.2.AM1 (Developer Milestone 1) build for Eclipse 2021-09.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.21.2.AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Quarkus Tools&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Quarkus stream selection in the new Quarkus project wizard&#xA;      &#xA;      &#xA;      When a new Quarkus project/module is to be generated, it is now possible to select the Quarkus stream (see this article) on which the generated application will be based on.&#xA;      &#xA;      &#xA;      By default, the recommended (latest release) will be selected but you can choose another one:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Enhanced code completion in Java files&#xA;      &#xA;      &#xA;      When you want to define a fallback method thanks to the @Fallback annotation from MicroProfile Fault Tolerance,...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 20 December 2021</title>
    <updated>2021-12-20T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-12-20.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-12-20.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2021-09 security fix release for Apache Log4j CVE-2021-44228</title>
    <updated>2021-12-16T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.21.1.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.21.1.ga.html" rel="alternate"></link>
    <summary type="html">Apache Log4j CVE-2021-44228 statement&#xA;      &#xA;      &#xA;      A remote code execution vulnerability in the Apache Log4j 2 Java library dubbed Log4Shell (see https://logging.apache.org/log4j/2.x/index.html#News or https://nvd.nist.gov/vuln/detail/CVE-2021-44228) has been releaved to the public audience on Friday Dec 9th, 2021.&#xA;      &#xA;      &#xA;      Weâve released new versions of JBoss Tools and Red Hat CodeReady Studio that switches the version of Apache Log4j to 2.16.0.&#xA;      &#xA;      &#xA;      We highly recommand to download or update to this latest version.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 2 December 2021</title>
    <updated>2021-12-02T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-12-02.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-12-02.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 18 November 2021</title>
    <updated>2021-11-18T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-11-18.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-11-18.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 04 November 2021</title>
    <updated>2021-11-04T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-11-04.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-11-04.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 21 October 2021</title>
    <updated>2021-10-21T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-10-21.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-10-21.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 08 October 2021</title>
    <updated>2021-10-08T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-10-08.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-10-08.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2021-09</title>
    <updated>2021-10-05T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.21.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.21.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.21.0 and&#xA;      Red Hat CodeReady Studio 12.21.0&#xA;      for Eclipse 2021-09 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.21 (2021-09) but we recommend&#xA;      using the latest Eclipse 4.21 2021-09 JEE Bundle&#xA;      &#xA;      &#xA;      since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 23 September 2021</title>
    <updated>2021-09-23T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-09-23.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-09-23.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 10 September 2021</title>
    <updated>2021-09-10T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-09-10.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-09-10.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.21.0.AM1 for Eclipse 2021-09</title>
    <updated>2021-09-07T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.21.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.21.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.21.0.AM1 (Developer Milestone 1) build for Eclipse 2021-09.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.21.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      OpenShift&#xA;      &#xA;      Operator based services&#xA;      &#xA;      When developing cloud native applications on OpenShift, developer may need to&#xA;      launch services (databases, messaging system,â¦â) that the application under&#xA;      development may need to connect to. The OpenShift tooling allowed to launch such&#xA;      services but it was based on the service catalog which is not available anymore on OpenShift 4.&#xA;      &#xA;      &#xA;      The new feature is based on operators which is the devops way of installing and&#xA;      managing software on Kubernetes clusters. So when you want to launch...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 27 August 2021</title>
    <updated>2021-08-27T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-08-27.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-08-27.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 11 August 2021</title>
    <updated>2021-08-11T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-08-11.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-08-11.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2021-03</title>
    <updated>2021-07-16T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.19.1.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.19.1.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.19.1 and&#xA;      Red Hat CodeReady Studio 12.19.1&#xA;      for Eclipse 2021-03 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.19 (2021-03) but we recommend&#xA;      using the latest Eclipse 4.19 2021-03 JEE Bundle&#xA;      &#xA;      &#xA;      since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 14 July 2021</title>
    <updated>2021-07-14T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-07-14.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-07-14.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 01 July 2021</title>
    <updated>2021-07-01T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-07-01.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-07-01.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 18 June 2021</title>
    <updated>2021-06-18T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-06-18.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-06-18.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.19.1.AM1 for Eclipse 2021-03</title>
    <updated>2021-06-15T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.19.1.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.19.1.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.19.1.AM1 (Developer Milestone 1) build for Eclipse 2021-03.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.19.1 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      OpenShift&#xA;      &#xA;      Improved OpenShift Application explorer&#xA;      &#xA;      When the OpenShift cluster has no applications or projects, user is required to create them. However,&#xA;      it may not be obvious for the user that the corresponding function is available from a sub menu of the&#xA;      New context menu.&#xA;      &#xA;      &#xA;      So now, a link will be provided within the tree with an explanation message.&#xA;      &#xA;      &#xA;      If no projects are available, user will be guided to create one:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      If no applications are available in a project, user will...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 31 May 2021</title>
    <updated>2021-05-31T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-05-31.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-05-31.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 26 April 2021</title>
    <updated>2021-04-26T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-04-26.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-04-26.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2021-03</title>
    <updated>2021-04-20T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.19.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.19.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.19.0 and&#xA;      Red Hat CodeReady Studio 12.19&#xA;      for Eclipse 2021-03 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.19 (2021-03) but we recommend&#xA;      using the latest Eclipse 4.19 2021-03 JEE Bundle&#xA;      since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 8 April 2021</title>
    <updated>2021-04-08T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-04-08.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-04-08.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 25 March 2021</title>
    <updated>2021-03-25T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-03-25.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-03-25.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.19.0.AM1 for Eclipse 2021-03</title>
    <updated>2021-03-24T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.19.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.19.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.19.0.AM1 (Developer Milestone 1) build for Eclipse 2021-03.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.19.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      OpenShift&#xA;      &#xA;      Browser based login to an OpenShift cluster&#xA;      &#xA;      When it comes to login to a cluster, OpenShift Tools supported two different authentication mechanisms:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      user/password&#xA;      &#xA;      &#xA;      token&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      The drawback is that it does not cover clusters where a more enhanced and modern authentication infrastructure is in place. So it is now possible to login to the cluster through an embedded web browser.&#xA;      &#xA;      &#xA;      In order to use it, go to the Login context menu from the Application Explorer view:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Click on the Retrieve...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 11 March 2021</title>
    <updated>2021-03-11T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-03-11.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-03-11.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 25 February 2021</title>
    <updated>2021-02-25T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-02-25.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-02-25.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 11 February 2021</title>
    <updated>2021-02-11T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-02-11.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-02-11.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 28 January 2021</title>
    <updated>2021-01-28T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-01-28.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-01-28.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2020-09</title>
    <updated>2021-01-26T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.18.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.18.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.18.0 and&#xA;      Red Hat CodeReady Studio 12.18&#xA;      for Eclipse 2020-09 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.17 (2020-09) but we recommend&#xA;      using the latest Eclipse 4.17 2020-09 JEE Bundle&#xA;      since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss: 14 January 2021</title>
    <updated>2021-01-14T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2021-01-14.html</id>
    <link href="https://www.jboss.org/posts/weekly-2021-01-14.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss: 25 December 2020</title>
    <updated>2020-12-25T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-12-25.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-12-25.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.18.0.AM1 for Eclipse 2020-09</title>
    <updated>2020-12-22T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.18.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.18.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.18.0.AM1 (Developer Milestone 1) build for Eclipse 2020-09.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.18.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Quarkus&#xA;      &#xA;      Support for codestarts in New Quarkus project wizard&#xA;      &#xA;      code.quarkus.io has added a new option codestart that allows extension that support&#xA;      this new feature to contribute sample code in the generated project. It is enabled&#xA;      by default and is accessible from the second step in the wizard:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      OpenShift&#xA;      &#xA;      Devfile based deployments&#xA;      &#xA;      The Application Explorer view is now based on odo 2.x, which allows deployments&#xA;      to be based on devfile (developer oriented manifest file). The components from&#xA;      the default odo registry are listed...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 17 December 2020</title>
    <updated>2020-12-17T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-12-17.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-12-17.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 16 September 2020</title>
    <updated>2020-12-03T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-12-03.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-12-03.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This week in JBoss - 20th November 2020</title>
    <updated>2020-11-20T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-11-20.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-11-20.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This week in JBoss - 6th November 2020</title>
    <updated>2020-11-06T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-11-06.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-11-06.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This week in JBoss - 23rd October 2020</title>
    <updated>2020-10-23T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-10-23.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-10-23.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2020-09</title>
    <updated>2020-10-13T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.17.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.17.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.17.0 and&#xA;      Red Hat CodeReady Studio 12.17&#xA;      for Eclipse 2020-09 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.17 (2020-09) but we recommend&#xA;      using the latest Eclipse 4.17 2020-06 JEE Bundle&#xA;      since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This week in JBoss - 12th October 2020</title>
    <updated>2020-10-12T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-10-12.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-10-12.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 30 September 2020</title>
    <updated>2020-09-30T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-09-30.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-09-30.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 16 September 2020</title>
    <updated>2020-09-16T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-09-16.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-09-16.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.17.0.AM1 for Eclipse 2020-09</title>
    <updated>2020-09-15T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.17.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.17.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.17.0.AM1 (Developer Milestone 1) build for Eclipse 2020-09.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.17.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Quarkus&#xA;      &#xA;      Support for YAML configuration file&#xA;      &#xA;      Quarkus supports configuration through YAML format. For more information,&#xA;      see the Quarkus documentation&#xA;      &#xA;      &#xA;      In order to use it, follow the steps:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      create a Quarkus project using the new Quarkus wizard&#xA;      &#xA;      &#xA;      create a new application.yaml or application.yml next to the application.properties in src/main/resources&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      The editor will open and you will get content assist and syntax validation.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      A number of additions and updates have been performed on the available Hibernate runtime  providers.&#xA;      &#xA;      &#xA;      New Runtime Provider&#xA;      &#xA;      A new...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: JBoss Weekly Editorial 27 August 2020</title>
    <updated>2020-08-27T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-08-27.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-08-27.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 13 August 2020</title>
    <updated>2020-08-13T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-08-13.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-08-13.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 30th July 2020: No rest for the JBoss community!</title>
    <updated>2020-07-30T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-07-30.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-07-30.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2020-06</title>
    <updated>2020-07-21T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.16.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.16.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.16.0 and&#xA;      Red Hat CodeReady Studio 12.16&#xA;      for Eclipse 2020-06 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.16 (2020-06) but we recommend&#xA;      using the latest Eclipse 4.16 2020-06 JEE Bundle&#xA;      since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &#34;JBoss Tools&#34; or &#34;Red Hat CodeReady...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 9 July 2020: Over the (j)cliff!</title>
    <updated>2020-07-09T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-07-09.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-07-09.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss: 26 June 2020</title>
    <updated>2020-06-26T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-06-26.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-06-26.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.16.0.AM1 for Eclipse 2020-06</title>
    <updated>2020-06-24T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.16.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.16.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.16.0.AM1 (Developer Milestone 1) build for Eclipse 2020-06.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.16.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      OpenShift&#xA;      &#xA;      Secure URL support&#xA;      &#xA;      It is now possible to create secured URLs in the Application Explorer View.&#xA;      If you select this option, the created URL will be accessible through https.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      When such an URL is displayed in the tree, the icon now has a secure lock indicator.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Hibernate Tools&#xA;      &#xA;      Hibernate Runtime Provider Updates&#xA;      &#xA;      A number of additions and updates have been performed on the available Hibernate runtime  providers.&#xA;      &#xA;      &#xA;      &#xA;      Runtime Provider Updates&#xA;      &#xA;      The Hibernate 5.4 runtime provider now incorporates Hibernate Core version...</summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss - 11 June 2020</title>
    <updated>2020-06-11T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-06-11.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-06-11.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: JBoss Weekly Editorial 29 May 2020</title>
    <updated>2020-05-29T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-05-29.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-05-29.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: JBoss Weekly Editorial 14 May 2020</title>
    <updated>2020-05-14T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-05-14.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-05-14.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Blogs: This Week in JBoss: 1 May 2020</title>
    <updated>2020-05-01T00:00:00Z</updated>
    <id>https://www.jboss.org/posts/weekly-2020-05-01.html</id>
    <link href="https://www.jboss.org/posts/weekly-2020-05-01.html" rel="alternate"></link>
    <summary type="html"></summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2020-03</title>
    <updated>2020-04-28T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.15.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.15.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.15.0 and&#xA;      Red Hat CodeReady Studio 12.15&#xA;      for Eclipse 2020-03 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.15 (2020-03) but we recommend&#xA;      using the latest Eclipse 4.15 2020-03 JEE Bundle&#xA;      since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &#34;JBoss Tools&#34; or &#34;Red Hat CodeReady...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.15.0.AM1 for Eclipse 2020-03</title>
    <updated>2020-03-31T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.15.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.15.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.15.0.AM1 (Developer Milestone 1) build for Eclipse 2020-03.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.15.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Please note that a regression has been found in the Fuse Tools. This is going&#xA;      to be fixed for the release (4.15.0.Final). Please find more information in this&#xA;      ticket.&#xA;      &#xA;      &#xA;      Quarkus Tools&#xA;      &#xA;      Language support for Kubernetes, Openshift, S2i and Docker properties&#xA;      &#xA;      There is now completion, hover, documentation and validation for kubernetes.,&#xA;      openshift., s2i., docker. properties&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Enter kubernetes prefix:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Enter openshift prefix:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Enter s2i prefix:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Language support for MicroProfile REST Client properties&#xA;      &#xA;      Likewise, there is now completion, hover, documentation and validation for the&#xA;      MicroProfile properties from REST...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2019-12</title>
    <updated>2020-03-17T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.14.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.14.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.14.0 and&#xA;      Red Hat CodeReady Studio 12.14&#xA;      for Eclipse 2019-12 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.14 (2019-12) but we recommend&#xA;      using the latest Eclipse 4.14 2019-12 JEE Bundle&#xA;      since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &#34;JBoss Tools&#34; or &#34;Red Hat CodeReady...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.14.0.AM1 for Eclipse 2019-12</title>
    <updated>2020-01-28T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.14.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.14.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.14.0.AM1 (Developer Milestone 1) build for Eclipse 2019-12.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.14.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Quarkus Tools&#xA;      &#xA;      Quarkus Tools added to JBoss Tools&#xA;      &#xA;      A new component has been added to JBoss Tools. Quarkus Tools. It aims at providing tools&#xA;      for Quarkus applications developers. The initial set of features is:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Wizard for creating Quarkus projects based on code.quarkus.io&#xA;      &#xA;      &#xA;      Code completion and syntax validation on application.properties&#xA;      &#xA;      &#xA;      Launching your Quarkus application in Run/Debug mode&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Quarkus project creation wizard&#xA;      &#xA;      A new wizard has been added to create a new Quarkus application project in your workspace.&#xA;      In order to launch it, first...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2019-09</title>
    <updated>2019-11-05T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.13.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.13.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.13.0 and Red Hat CodeReady Studio 12.13 for Eclipse 2019-09 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.13 (2019-09) but we recommend&#xA;      using the latest Eclipse 4.13 2019-09 JEE Bundle since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &#34;JBoss Tools&#34; or...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2019-06</title>
    <updated>2019-07-08T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.12.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.12.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.12.0 and Red Hat CodeReady Studio 12.12 for Eclipse 2019-06 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar codereadystudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.12 (2019-06) but we recommend&#xA;      using the latest Eclipse 4.12 2019-06 JEE Bundle since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &#34;JBoss Tools&#34; or...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.12.0.AM1 for Eclipse 2019-06</title>
    <updated>2019-06-12T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.12.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.12.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.12.0.AM1 (Developer Milestone 1) build for Eclipse 2019-06.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.12.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Server Tools&#xA;      &#xA;      Wildfly 17 Server Adapter&#xA;      &#xA;      A server adapter has been added to work with Wildfly 17. It adds support for Java EE 8.&#xA;      &#xA;      &#xA;      Enjoy!&#xA;      &#xA;      &#xA;      Jeff Maury&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      ...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: Integration Tooling for Eclipse 2019-03</title>
    <updated>2019-05-30T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/integration-stack-4.11.0.Final.html</id>
    <link href="https://tools.jboss.org/blog/integration-stack-4.11.0.Final.html" rel="alternate"></link>
    <summary type="html">Check out our new branding for Eclipse 2019-03.  Weâre now Red Hat CodeReady Studio 12 Integration Stack.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools Integration Stack 4.11.0.Final / Red Hat CodeReady Studio Integration Stack 12.11.0.GA&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      All of the Integration Stack components have been verified to work with the same dependencies as JBoss Tools 4.11 and Red Hat CodeReady Studio 12.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Whatâs new for this release?&#xA;      &#xA;      &#xA;      DataVirtualization support from Teiid Designer is no longer available through the Integration Stack.  It can be installed directly from Teiid Designer&#xA;      &#xA;      &#xA;      This release has an updated BPMN2 Modeler and jBPM/Drools/KIE.&#xA;      &#xA;      &#xA;      Released Tooling Highlights&#xA;      &#xA;      Business Process and Rules Development&#xA;      &#xA;      BPMN2 Modeler Known Issues&#xA;      &#xA;      See the BPMN2 1.5.1.Final Known...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: Quarkus</title>
    <updated>2019-05-13T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/quarkus.html</id>
    <link href="https://tools.jboss.org/blog/quarkus.html" rel="alternate"></link>
    <summary type="html">Youâve probably heard about Quarkus, the Supersonic Subatomic Java framework tailored for Kubernetes and containers.&#xA;      &#xA;      &#xA;      We wrote an article on how to create your first Quarkus project in an Eclipse based IDE (like Red Hat CodeReady Studio).&#xA;      &#xA;      &#xA;      You can read it at https://developers.redhat.com/blog/2019/05/09/create-your-first-quarkus-project-with-eclipse-ide-red-hat-codeready-studio/&#xA;      ...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2019-03</title>
    <updated>2019-04-01T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.11.0.ga.html</id>
    <link href="https://tools.jboss.org/blog/12.11.0.ga.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.11.0 and Red Hat CodeReady Studio 12.11 for Eclipse 2019-03 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar devstudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.11 (2019-03) but we recommend&#xA;      using the latest Eclipse 4.11 2019-03 JEE Bundle since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &#34;JBoss Tools&#34; or...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: Announcing IntelliJ OpenShift Connector</title>
    <updated>2019-03-11T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/ij-openshift-connector.html</id>
    <link href="https://tools.jboss.org/blog/ij-openshift-connector.html" rel="alternate"></link>
    <summary type="html">We are extremely pleased to announce that the preview release of the Red Hat OpenShift Connector&#xA;      for JetBrains products (IntelliJ IDEA, WebStorm,â¦â.) is now available. You can download the&#xA;      OpenShift Connector plugin from the JetBrains marketplace&#xA;      or install it directly from the plugins gallery in JetBrains products.&#xA;      &#xA;      &#xA;      This article provides describes the features and benefits of the plugin and provides installation details.&#xA;      It also provides a demo of how using the plugin improves the end-to-end experience of developing&#xA;      and deploying Spring Boot applications to your OpenShift cluster.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Benefits of using the extension&#xA;      &#xA;      &#xA;      Red Hat OpenShift is a container application platform that brings&#xA;      the power of Kubernetes and containers to...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.11.0.AM1 for Eclipse 2018-12</title>
    <updated>2019-02-26T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.11.0.am1.html</id>
    <link href="https://tools.jboss.org/blog/4.11.0.am1.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.11.0.AM1 (Developer Milestone 1) build for Eclipse 2018-12.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.11.0 AM1.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      Server Tools&#xA;      &#xA;      EAP 7.2 Server Adapter&#xA;      &#xA;      A server adapter has been added to work with EAP 7.2.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      OpenShift 3&#xA;      &#xA;      New OpenShift connection helper&#xA;      &#xA;      When you need to defined a new OpenShift connection, you need to provide the following information:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      cluster URL&#xA;      &#xA;      &#xA;      username and password or token&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      If youâve already logged in your cluster through the OpenShift Web Console, you can copy an oc command&#xA;      in the clipboard that contains both the cluster URL and your token.&#xA;      &#xA;      &#xA;      So, from now, there is a new...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: We are hiring</title>
    <updated>2019-01-17T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/we-are-hiring - again.html</id>
    <link href="https://tools.jboss.org/blog/we-are-hiring - again.html" rel="alternate"></link>
    <summary type="html">The Developer Experience and Tooling group, of which JBoss Tools team is part,&#xA;      is looking for an awesome developer. We are looking to continue&#xA;      improving the usability for developers around various IDEs including Eclipse, VSCode and IntelliJ and around the Red Hat product line, including JBoss Middleware.&#xA;      &#xA;      &#xA;      Topics range from Java to JavaScript, application servers to containers, source code tinkering to full blown CI/CD setups.&#xA;      &#xA;      &#xA;      If you are into making developers life easier and like to be able to get involved in many different technologies and get them to work great together then do apply.&#xA;      &#xA;      &#xA;      You can also ping me (jeffmaury@redhat.com) for questions.&#xA;      &#xA;      &#xA;      The current list...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat Developer Studio for Eclipse 2018-09</title>
    <updated>2018-10-08T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.9.0.html</id>
    <link href="https://tools.jboss.org/blog/12.9.0.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.9.0 and Red Hat Developer Studio 12.9 for Eclipse 2018-09 are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat Developer Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat Developer product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar devstudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) Developer Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.9 (2018-09) but we recommend&#xA;      using the latest Eclipse 4.9 2018-09 JEE Bundle since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &#34;JBoss Tools&#34; or...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.9.0.AM3 for Eclipse 2018-09 M2</title>
    <updated>2018-09-11T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.9.0.am3.html</id>
    <link href="https://tools.jboss.org/blog/4.9.0.am3.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.9.0.AM3 (Developer Milestone 3) build for Eclipse 2018-09 M2.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.9.0 AM3.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      &#xA;      &#xA;      Server Tools&#xA;      &#xA;      Wildfly 14 Server Adapter&#xA;      &#xA;      A server adapter has been added to work with Wildfly 14. It adds support for Java EE 8.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Forge Tools&#xA;      &#xA;      Forge Runtime updated to 3.9.1.Final&#xA;      &#xA;      The included Forge runtime is now 3.9.1.Final. Read the official announcement here.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Fuse Tooling&#xA;      &#xA;      Know issues&#xA;      &#xA;      A regression has been introduced touching all functionalities using Jaxb. It includes:&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Variable content display in debug&#xA;      &#xA;      &#xA;      Data Transformation wizard&#xA;      &#xA;      &#xA;      Tracing Camel route via Jolokia Connection&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      It may affect other functionalities. In this case, you will have...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.9.0.AM2 for Eclipse 2018-09 M2</title>
    <updated>2018-08-21T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.9.0.am2.html</id>
    <link href="https://tools.jboss.org/blog/4.9.0.am2.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.9.0.AM2 (Developer Milestone 2) build for Eclipse 2018-09 M2.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.9.0 AM2.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Eclipse 2018-09&#xA;      &#xA;      JBoss Tools is now targeting Eclipse 2018-09 M2.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Fuse Tooling&#xA;      &#xA;      WSDL to Camel REST DSL improvements&#xA;      &#xA;      The version of the library used to generate Camel REST DSL from WSDl files has been updated. It now covers more types of WSDL files. See https://github.com/jboss-fuse/wsdl2rest/milestone/3?closed=1 for the list of improvements.&#xA;      &#xA;      &#xA;      &#xA;      REST Editor tab improvements&#xA;      &#xA;      In the last milestone we began adding editing capabilities to the read-only REST tab to the route editor we added in the previous release....</summary>
  </entry>
  <entry>
    <title>JBoss Tools: Integration Tooling for Eclipse Photon</title>
    <updated>2018-08-09T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/integration-stack-4.6.0.Final.html</id>
    <link href="https://tools.jboss.org/blog/integration-stack-4.6.0.Final.html" rel="alternate"></link>
    <summary type="html">Try our leaner, complete Eclipse Photon and Red Hat Developer Studio 12 compatible integration tooling.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools Integration Stack 4.6.0.Final / Red Hat Developer Studio Integration Stack 12.0.0.GA&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      All of the Integration Stack components have been verified to work with the same dependencies as JBoss Tools 4.6 and Red Hat Developer Studio 12.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Whatâs new for this release?&#xA;      &#xA;      &#xA;      This is the initial release in support of Eclipse Photon.  It syncs up with Developer Studio 12.0.0, JBoss Tools 4.6.0 and Eclipse 4.8.0 (Photon).  It is also a maintenance release for Teiid Designer and BRMS tooling.&#xA;      &#xA;      &#xA;      Released Tooling Highlights&#xA;      &#xA;      Business Process and Rules Development&#xA;      &#xA;      BPMN2 Modeler Known...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools and Red Hat Developer Studio for Eclipse Photon</title>
    <updated>2018-07-17T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/12.0.0.ga-for-photon.html</id>
    <link href="https://tools.jboss.org/blog/12.0.0.ga-for-photon.html" rel="alternate"></link>
    <summary type="html">JBoss Tools 4.6.0 and Red Hat Developer Studio 12.0 for Eclipse Photon are here waiting for you. Check it out!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Installation&#xA;      &#xA;      &#xA;      Red Hat Developer Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat Developer product page and run it like this:&#xA;      &#xA;      &#xA;      &#xA;      java -jar devstudio-&lt;installername&gt;.jar&#xA;      &#xA;      &#xA;      &#xA;      JBoss Tools or Bring-Your-Own-Eclipse (BYOE) Developer Studio require a bit more:&#xA;      &#xA;      &#xA;      This release requires at least Eclipse 4.8 (Photon) but we recommend&#xA;      using the latest Eclipse 4.8 Photon JEE Bundle since then you get most of the dependencies preinstalled.&#xA;      &#xA;      &#xA;      Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &#34;JBoss Tools&#34; or...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: RHAMT Eclipse Plugin 4.1.0.Final has been released!</title>
    <updated>2018-07-17T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/rhamt_4.1.0.Final_release.html</id>
    <link href="https://tools.jboss.org/blog/rhamt_4.1.0.Final_release.html" rel="alternate"></link>
    <summary type="html">Happy to announce version 4.1.0.Final of the Red Hat Application Migration Toolkit (RHAMT) is now available.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Getting Started&#xA;      &#xA;      &#xA;      Downloads available through JBoss Central and from the update site.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      RHAMT in a Nutshel&#xA;      &#xA;      &#xA;      RHAMT is an application migration and assessment tool. The migrations supported include application platform upgrades,&#xA;      migrations to a cloud-native deployment environment, and also migrations from several commercial products to the&#xA;      Red Hat JBoss Enterprise Application Platform.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Eclipse Photon&#xA;      &#xA;      The tooling now targets Eclipse Photon.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Ignoring Patterns&#xA;      &#xA;      Specify locations of files to exclude from analysis (using regular expressions).&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      External Report&#xA;      &#xA;      The generated report has been moved out of Eclipse and into the browser.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Improved Ruleset Schema&#xA;      &#xA;      The XML ruleset schema has...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.6.0.AM3 for Eclipse Photon.0.RC3</title>
    <updated>2018-06-19T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.6.0.am3-for-photon.0.rc3.html</id>
    <link href="https://tools.jboss.org/blog/4.6.0.am3-for-photon.0.rc3.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.6.0.AM3 (Developer Milestone 3) build for Eclipse Photon.0.RC3.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.6.0 AM3.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Eclipse Photon&#xA;      &#xA;      JBoss Tools is now targeting Eclipse Photon RC3.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Fuse Tooling&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Camel URI completion with XML DSL&#xA;      &#xA;      &#xA;      As announced here, it was already possible to have Camel URI completion with XML DSL in the source tab of the Camel Route editor by installing the Language Support for Apache Camel in your IDE.&#xA;      &#xA;      &#xA;      This feature is now installed by default with Fuse Tooling!&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      &#xA;      Now you have the choice to use the properties view with UI help to configure Camel...</summary>
  </entry>
  <entry>
    <title>JBoss Tools: JBoss Tools 4.6.0.AM2 for Eclipse Photon.0.M7</title>
    <updated>2018-05-29T00:00:00Z</updated>
    <id>https://tools.jboss.org/blog/4.6.0.am2-for-photon.0.m7.html</id>
    <link href="https://tools.jboss.org/blog/4.6.0.am2-for-photon.0.m7.html" rel="alternate"></link>
    <summary type="html">Happy to announce 4.6.0.AM2 (Developer Milestone 2) build for Eclipse Photon.0.M7.&#xA;      &#xA;      &#xA;      Downloads available at JBoss Tools 4.6.0 AM2.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      What is New?&#xA;      &#xA;      &#xA;      Full info is at this page. Some highlights are below.&#xA;      &#xA;      &#xA;      General&#xA;      &#xA;      Eclipse Photon&#xA;      &#xA;      JBoss Tools is now targeting Eclipse Photon M7.&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      OpenShift&#xA;      &#xA;      Enhanced Spring Boot support for server adapter&#xA;      &#xA;      Spring Boot runtime was already supported by the OpenShift server adapter. However, it has one major limitation: files and&#xA;      resources were synchronized between the local workstation and the remote pod(s) only for the main project. If your Spring Boot&#xA;      application had dependencies that were present in the local workspace, any change to a file or resource of one of these dependencies&#xA;      was...</summary>
  </entry>
</feed>